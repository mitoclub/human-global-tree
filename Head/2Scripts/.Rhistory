m['Trp', 'Gly'] <- aa_count['Trp.Gly']
m['Trp', 'Ala'] <- aa_count['Trp.Ala']
m['Trp', 'Val'] <- aa_count['Trp.Val']
m['Trp', 'Ile'] <- aa_count['Trp.Ile']
m['Trp', 'Leu'] <- aa_count['Trp.Leu']
m['Trp', 'Pro'] <- aa_count['Trp.Pro']
m['Trp', 'Ser'] <- aa_count['Trp.Ser']
m['Trp', 'Thr'] <- aa_count['Trp.Thr']
m['Trp', 'Cys'] <- aa_count['Trp.Cys']
m['Trp', 'Met'] <- aa_count['Trp.Met']
m['Trp', 'Asp'] <- aa_count['Trp.Asp']
m['Trp', 'Asn'] <- aa_count['Trp.Asn']
m['Trp', 'Glu'] <- aa_count['Trp.Glu']
m['Trp', 'Gln'] <- aa_count['Trp.Gln']
m['Trp', 'Lys'] <- aa_count['Trp.Lys']
m['Trp', 'Arg'] <- aa_count['Trp.Arg']
m['Trp', 'His'] <- aa_count['Trp.His']
m['Trp', 'Phe'] <- aa_count['Trp.Phe']
m['Trp', 'Tyr'] <- aa_count['Trp.Tyr']
m[is.na(m)] <- 0  #NA to 0
heatmap(m, Colv = "Rowv", xlab = 'ancestral', ylab = 'derived') #ааааааааааааааааа!
rm(list=ls(all=TRUE))
#indata <- read.csv("/home/alima/arrr/fulltreeCodons.csv", header = TRUE, sep = ";") #читаю файл
indata = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
data <- subset(indata, synonymous == "non-synonymous" & derived_aa != "Ambiguous"& gene_info != "mRNA_ND6")  #убираю лишнее
data$FromTo = paste(data$ancestral_aa,data$derived_aa,sep = '>')
FromTo = data.frame(table(data$FromTo))
names(FromTo) = c('FromAncestralToDerived', 'NumberOfEvents')
nrow(FromTo) # 236, but totally there are 21*21 possibilities
AllAa = data.frame(unique(data$ancestral_aa)); nrow(AllAa) # including stop
View(FromTo)
strsplit("Leu>Phe",sep='>')
strsplit("Leu>Phe",'>')
sort(unlist(strsplit("Leu>Phe",'>')))
sort(unlist(strsplit("Phe>Leu",'>')))
FromTo$AaPairId = paste(sort(unlist(strsplit(FromTo$FromAncestralToDerived,'>'))),collapse = '.')
i = 1
FromTo$AaPairId[i] = paste(sort(unlist(strsplit(FromTo$FromAncestralToDerivedp[i],'>'))),collapse = '.')
sort(unlist(strsplit(FromTo$FromAncestralToDerivedp[i],'>')))
FromTo$FromAncestralToDerivedp[i]
i
View(FromTo)
FromTo$FromAncestralToDerived = as.character(FromTo$FromAncestralToDerived)
rm(list=ls(all=TRUE))
#indata <- read.csv("/home/alima/arrr/fulltreeCodons.csv", header = TRUE, sep = ";") #читаю файл
indata = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
#### FILTER OUT:
data <- subset(indata, synonymous == "non-synonymous" & derived_aa != "Ambiguous"& gene_info != "mRNA_ND6")  #убираю лишнее
## ADD FILTER OF BACKGROUND (THE SAME NEIGHBOR NUCLEOTIDES)
## DERIVE SUBSTITUTION MATRIX
data$FromTo = paste(data$ancestral_aa,data$derived_aa,sep = '>')
FromTo = data.frame(table(data$FromTo))
names(FromTo) = c('FromAncestralToDerived', 'NumberOfEvents')
nrow(FromTo) # 236, but totally there are 21*21 possibilities
AllAa = data.frame(unique(data$ancestral_aa)); nrow(AllAa) # 21 including stop
FromTo$FromAncestralToDerived = as.character(FromTo$FromAncestralToDerived)
i = 1
FromTo$AaPairId[i] = paste(sort(unlist(strsplit(FromTo$FromAncestralToDerivedp[i],'>'))),collapse = '.')
FromTo$AaPairId[i] = paste(sort(unlist(strsplit(FromTo$FromAncestralToDerived[i],'>'))),collapse = '.')
FromTo$AaPairId[i]
FromTo$AaPairId = paste(sort(unlist(strsplit(FromTo$FromAncestralToDerived,'>'))),collapse = '.')
FromTo$AaPairId
for (i in 1:nrow(FromTo)) {  FromTo$AaPairId[i] = paste(sort(unlist(strsplit(FromTo$FromAncestralToDerived[i],'>'))),collapse = '.') }
rm(list=ls(all=TRUE))
#indata <- read.csv("/home/alima/arrr/fulltreeCodons.csv", header = TRUE, sep = ";") #читаю файл
indata = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
#### FILTER OUT:
data <- subset(indata, synonymous == "non-synonymous" & derived_aa != "Ambiguous"& gene_info != "mRNA_ND6")  #убираю лишнее
## ADD FILTER OF BACKGROUND (THE SAME NEIGHBOR NUCLEOTIDES)
## DERIVE SUBSTITUTION MATRIX
data$FromTo = paste(data$ancestral_aa,data$derived_aa,sep = '>')
FromTo = data.frame(table(data$FromTo))
names(FromTo) = c('FromAncestralToDerived', 'NumberOfEvents')
nrow(FromTo) # 236, but totally there are 21*21 possibilities
AllAa = data.frame(unique(data$ancestral_aa)); nrow(AllAa) # 21 including stop
FromTo$FromAncestralToDerived = as.character(FromTo$FromAncestralToDerived)
## DERIVE UNIQUE IDENTIFIER FOR EACH PAIR OF AMINOACIDS:
for (i in 1:nrow(FromTo)) {FromTo$AaPairId[i] = paste(sort(unlist(strsplit(FromTo$FromAncestralToDerived[i],'>'))),collapse = '.') }
View(FromTo)
rm(list=ls(all=TRUE))
#indata <- read.csv("/home/alima/arrr/fulltreeCodons.csv", header = TRUE, sep = ";") #читаю файл
indata = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
#### FILTER OUT:
data <- subset(indata, synonymous == "non-synonymous" & derived_aa != "Ambiguous"& gene_info != "mRNA_ND6")  #убираю лишнее
## ADD FILTER OF BACKGROUND (THE SAME NEIGHBOR NUCLEOTIDES)
## DERIVE SUBSTITUTION MATRIX
data$FromTo = paste(data$ancestral_aa,data$derived_aa,sep = '>')
FromTo = data.frame(table(data$FromTo))
names(FromTo) = c('FromAncestralToDerived', 'NumberOfEvents')
nrow(FromTo) # 236, but totally there are 21*21 possibilities
FromTo$FromAncestralToDerived = as.character(FromTo$FromAncestralToDerived)
##### ADD DUMMY MATRIX WITH ZEROES
AllAa = data.frame(unique(data$ancestral_aa)); nrow(AllAa) # 21 including stop
View(AllAa)
DummyZeroes = data.frame(AllAa)
View(DummyZeroes)
DummyZeroes = merge(data.frame(AllAa),data.frame(AllAa))
View(DummyZeroes)
AllAa = data.frame(unique(data$ancestral_aa)); nrow(AllAa) # 21 including stop
DummyZeroes = merge(AllAa,AllAa)
View(DummyZeroes)
DummyZeroes = merge(AllAa,AllAa, all = TRUE)
AllAa = data.frame(unique(data$ancestral_aa)); nrow(AllAa) # 21 including stop
AllAa
AllAa = data.frame(unique(data$ancestral_aa)); nrow(AllAa) # 21 including stop
AllAa = data.frame(unique(data$ancestral_aa)); nrow(AllAa) # 21 including stop
names(AllAa) = c('AA1')
View(AllAa)
AllAa1 = data.frame(unique(data$ancestral_aa)); nrow(AllAa1); names(AllAa1) = c('AA1')
AllAa2 = data.frame(unique(data$ancestral_aa)); nrow(AllAa2); names(AllAa2) = c('AA2')
DummyZeroes = merge(AllAa1,AllAa2)
View(DummyZeroes)
View(DummyZeroes)
DummyZeroes$FromTo=paste(DummyZeroes$AA1,DummyZeroes$AA2,'>')
View(DummyZeroes)
DummyZeroes$FromTo=paste(DummyZeroes$AA1,DummyZeroes$AA2,sep='>')
View(DummyZeroes)
DummyZeroes$NumberOfEvents = 0
View(DummyZeroes)
DummyZeroes = DummyZeroes[3,4]
AllAa1 = data.frame(unique(data$ancestral_aa)); nrow(AllAa1); names(AllAa1) = c('AA1')
AllAa2 = data.frame(unique(data$ancestral_aa)); nrow(AllAa2); names(AllAa2) = c('AA2')
DummyZeroes = merge(AllAa1,AllAa2)
DummyZeroes$FromTo=paste(DummyZeroes$AA1,DummyZeroes$AA2,sep='>')
DummyZeroes$NumberOfEvents = 0
DummyZeroes = DummyZeroes[c(3,4)]
View(DummyZeroes)
rm(list=ls(all=TRUE))
#indata <- read.csv("/home/alima/arrr/fulltreeCodons.csv", header = TRUE, sep = ";") #читаю файл
indata = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
#### FILTER OUT:
data <- subset(indata, synonymous == "non-synonymous" & derived_aa != "Ambiguous"& gene_info != "mRNA_ND6")  #убираю лишнее
## ADD FILTER OF BACKGROUND (THE SAME NEIGHBOR NUCLEOTIDES)
##### DERIVE SUBSTITUTION MATRIX FromTo
data$FromTo = paste(data$ancestral_aa,data$derived_aa,sep = '>')
FromTo = data.frame(table(data$FromTo))
names(FromTo) = c('FromAncestralToDerived', 'NumberOfEvents')
nrow(FromTo) # 236, but totally there are 21*21 possibilities
FromTo$FromAncestralToDerived = as.character(FromTo$FromAncestralToDerived)
##### ADD DUMMY MATRIX WITH ZEROES
AllAa1 = data.frame(unique(data$ancestral_aa)); nrow(AllAa1); names(AllAa1) = c('AA1')
AllAa2 = data.frame(unique(data$ancestral_aa)); nrow(AllAa2); names(AllAa2) = c('AA2')
DummyZeroes = merge(AllAa1,AllAa2)
DummyZeroes$FromTo=paste(DummyZeroes$AA1,DummyZeroes$AA2,sep='>')
DummyZeroes$NumberOfEvents = 0
DummyZeroes = DummyZeroes[c(3,4)]
View(FromTo)
FromTo = rbind(FromTo,DummyZeroes)
View(DummyZeroes)
rm(list=ls(all=TRUE))
#indata <- read.csv("/home/alima/arrr/fulltreeCodons.csv", header = TRUE, sep = ";") #читаю файл
indata = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
#### FILTER OUT:
data <- subset(indata, synonymous == "non-synonymous" & derived_aa != "Ambiguous"& gene_info != "mRNA_ND6")  #убираю лишнее
## ADD FILTER OF BACKGROUND (THE SAME NEIGHBOR NUCLEOTIDES)
##### DERIVE SUBSTITUTION MATRIX FromTo
data$FromTo = paste(data$ancestral_aa,data$derived_aa,sep = '>')
FromTo = data.frame(table(data$FromTo))
names(FromTo) = c('FromAncestralToDerived', 'NumberOfEvents')
nrow(FromTo) # 236, but totally there are 21*21 possibilities
FromTo$FromAncestralToDerived = as.character(FromTo$FromAncestralToDerived)
##### ADD DUMMY MATRIX WITH ZEROES
AllAa1 = data.frame(unique(data$ancestral_aa)); nrow(AllAa1); names(AllAa1) = c('AA1')
AllAa2 = data.frame(unique(data$ancestral_aa)); nrow(AllAa2); names(AllAa2) = c('AA2')
DummyZeroes = merge(AllAa1,AllAa2)
DummyZeroes$FromAncestralToDerived=paste(DummyZeroes$AA1,DummyZeroes$AA2,sep='>')
DummyZeroes$NumberOfEvents = 0
DummyZeroes = DummyZeroes[c(3,4)]
##### rbind and aggregate FromTo and DummyZeroes
FromTo = rbind(FromTo,DummyZeroes)
View(FromTo)
FromTo1 = rbind(FromTo,DummyZeroes)
rm(list=ls(all=TRUE))
#indata <- read.csv("/home/alima/arrr/fulltreeCodons.csv", header = TRUE, sep = ";") #читаю файл
indata = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
#### FILTER OUT:
data <- subset(indata, synonymous == "non-synonymous" & derived_aa != "Ambiguous"& gene_info != "mRNA_ND6")  #убираю лишнее
## ADD FILTER OF BACKGROUND (THE SAME NEIGHBOR NUCLEOTIDES)
##### DERIVE SUBSTITUTION MATRIX FromTo
data$FromTo = paste(data$ancestral_aa,data$derived_aa,sep = '>')
FromTo = data.frame(table(data$FromTo))
names(FromTo) = c('FromAncestralToDerived', 'NumberOfEvents')
nrow(FromTo) # 236, but totally there are 21*21 possibilities
FromTo$FromAncestralToDerived = as.character(FromTo$FromAncestralToDerived)
##### ADD DUMMY MATRIX WITH ZEROES
AllAa1 = data.frame(unique(data$ancestral_aa)); nrow(AllAa1); names(AllAa1) = c('AA1')
AllAa2 = data.frame(unique(data$ancestral_aa)); nrow(AllAa2); names(AllAa2) = c('AA2')
DummyZeroes = merge(AllAa1,AllAa2)
DummyZeroes$FromAncestralToDerived=paste(DummyZeroes$AA1,DummyZeroes$AA2,sep='>')
DummyZeroes$NumberOfEvents = 0
DummyZeroes = DummyZeroes[c(3,4)]
##### rbind and aggregate FromTo and DummyZeroes
FromTo1 = rbind(FromTo,DummyZeroes)
FromTo2 = aggregate(FromTo1$NumberOfEvents, by = list(FromTo$FromAncestralToDerived), dun = SUM)
FromTo2 = aggregate(FromTo1$NumberOfEvents, by = list(FromTo$FromAncestralToDerived), FUN = SUM)
FromTo2 = aggregate(FromTo1$NumberOfEvents, by = list(FromTo$FromAncestralToDerived), FUN = sum)
FromTo2 = aggregate(FromTo1$NumberOfEvents, by = list(FromTo1$FromAncestralToDerived), FUN = sum)
View(FromTo2)
rm(list=ls(all=TRUE))
indata = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
#### FILTER OUT:
data <- subset(indata, synonymous == "non-synonymous" & derived_aa != "Ambiguous"& gene_info != "mRNA_ND6")  #убираю лишнее
table(data$derived_aa)
rm(list=ls(all=TRUE))
indata = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
#### FILTER OUT:
data <- subset(indata, synonymous == "non-synonymous" & derived_aa != "Ambiguous" & derived_aa != "Asn/Asp" & derived_aa != "Gln/Glu" & derived_aa != "Leu/Ile" & gene_info != "mRNA_ND6")  #убираю лишнее
# table(data$derived_aa)
rm(list=ls(all=TRUE))
data = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
#### FILTER OUT:
data <- subset(data, synonymous == "non-synonymous" & derived_aa != "Ambiguous" & derived_aa != "Asn/Asp" & derived_aa != "Gln/Glu" & derived_aa != "Leu/Ile" & gene_info != "mRNA_ND6")  #убираю лишнее
table(data$derived_aa)
data$FromTo = paste(data$ancestral_aa,data$derived_aa,sep = '>')
FromTo = data.frame(table(data$FromTo))
names(FromTo) = c('FromAncestralToDerived', 'NumberOfEvents')
nrow(FromTo) # 236, but totally there are 21*21 possibilities
AllAa = data.frame(unique(data$ancestral_aa)); length(AllAa) # including stop
nrow(AllAa) # including stop
str(indata)
indata$derived_aa=as.character(indata$derived_aa)
rm(list=ls(all=TRUE))
#indata <- read.csv("/home/alima/arrr/fulltreeCodons.csv", header = TRUE, sep = ";") #читаю файл
data = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
#### FILTER OUT:
data <- subset(data, synonymous == "non-synonymous" & derived_aa != "Ambiguous" & derived_aa != "Asn/Asp" & derived_aa != "Gln/Glu" & derived_aa != "Leu/Ile" & gene_info != "mRNA_ND6")  #убираю лишнее
table(data$derived_aa)
## ADD FILTER OF BACKGROUND (THE SAME NEIGHBOR NUCLEOTIDES)
##### DERIVE SUBSTITUTION MATRIX FromTo
data$FromTo = paste(data$ancestral_aa,data$derived_aa,sep = '>')
FromTo = data.frame(table(data$FromTo))
names(FromTo) = c('FromAncestralToDerived', 'NumberOfEvents')
nrow(FromTo) # 236, but totally there are 21*21 possibilities
FromTo$FromAncestralToDerived = as.character(FromTo$FromAncestralToDerived)
##### ADD DUMMY MATRIX WITH ZEROES
AllAa1 = data.frame(unique(data$ancestral_aa)); nrow(AllAa1); names(AllAa1) = c('AA1')
AllAa2 = data.frame(unique(data$ancestral_aa)); nrow(AllAa2); names(AllAa2) = c('AA2')
DummyZeroes = merge(AllAa1,AllAa2)
DummyZeroes$FromAncestralToDerived=paste(DummyZeroes$AA1,DummyZeroes$AA2,sep='>')
DummyZeroes$NumberOfEvents = 0
DummyZeroes = DummyZeroes[c(3,4)]
##### rbind and aggregate FromTo and DummyZeroes
FromTo1 = rbind(FromTo,DummyZeroes)
FromTo2 = aggregate(FromTo1$NumberOfEvents, by = list(FromTo1$FromAncestralToDerived), FUN = sum)
View(FromTo2)
rm(list=ls(all=TRUE))
#indata <- read.csv("/home/alima/arrr/fulltreeCodons.csv", header = TRUE, sep = ";") #читаю файл
data = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
#### FILTER OUT:
data <- subset(data, synonymous == "non-synonymous" & derived_aa != "Ambiguous" & derived_aa != "Asn/Asp" & derived_aa != "Gln/Glu" & derived_aa != "Leu/Ile" & gene_info != "mRNA_ND6")  #убираю лишнее
table(data$derived_aa)
## ADD FILTER OF BACKGROUND (THE SAME NEIGHBOR NUCLEOTIDES)
##### DERIVE SUBSTITUTION MATRIX FromTo
data$FromTo = paste(data$ancestral_aa,data$derived_aa,sep = '>')
FromTo = data.frame(table(data$FromTo))
names(FromTo) = c('FromAncestralToDerived', 'NumberOfEvents')
nrow(FromTo) # 236, but totally there are 21*21 possibilities
FromTo$FromAncestralToDerived = as.character(FromTo$FromAncestralToDerived)
##### ADD DUMMY MATRIX WITH ZEROES
AllAa1 = data.frame(unique(data$ancestral_aa)); nrow(AllAa1); names(AllAa1) = c('AA1')
AllAa2 = data.frame(unique(data$ancestral_aa)); nrow(AllAa2); names(AllAa2) = c('AA2')
DummyZeroes = merge(AllAa1,AllAa2)
DummyZeroes$FromAncestralToDerived=paste(DummyZeroes$AA1,DummyZeroes$AA2,sep='>')
DummyZeroes$NumberOfEvents = 0
DummyZeroes = DummyZeroes[c(3,4)]
##### rbind and aggregate FromTo and DummyZeroes
FromTo1 = rbind(FromTo,DummyZeroes)
FromTo2 = aggregate(FromTo1$NumberOfEvents, by = list(FromTo1$FromAncestralToDerived), FUN = sum)
View(FromTo2)
names(FromTo2)=c('FromAncestralToDerived','NumberOfEvents')
for (i in 1:nrow(FromTo)) {FromTo$AaPairId[i] = paste(sort(unlist(strsplit(FromTo$FromAncestralToDerived[i],'>'))),collapse = '.') }
for (i in 1:nrow(FromTo2)) {FromTo2$AaPairId[i] = paste(sort(unlist(strsplit(FromTo2$FromAncestralToDerived[i],'>'))),collapse = '.') }
View(FromTo2)
rm(list=ls(all=TRUE))
#indata <- read.csv("/home/alima/arrr/fulltreeCodons.csv", header = TRUE, sep = ";") #читаю файл
data = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
#### FILTER OUT:
data <- subset(data, synonymous == "non-synonymous" & derived_aa != "Ambiguous" & derived_aa != "Asn/Asp" & derived_aa != "Gln/Glu" & derived_aa != "Leu/Ile" & gene_info != "mRNA_ND6")  #убираю лишнее
table(data$derived_aa)
## ADD FILTER OF BACKGROUND (THE SAME NEIGHBOR NUCLEOTIDES)
##### DERIVE SUBSTITUTION MATRIX FromTo
data$FromTo = paste(data$ancestral_aa,data$derived_aa,sep = '>')
FromTo = data.frame(table(data$FromTo))
names(FromTo) = c('FromAncestralToDerived', 'NumberOfEvents')
nrow(FromTo) # 236, but totally there are 21*21 possibilities
FromTo$FromAncestralToDerived = as.character(FromTo$FromAncestralToDerived)
##### ADD DUMMY MATRIX WITH ZEROES
AllAa1 = data.frame(unique(data$ancestral_aa)); nrow(AllAa1); names(AllAa1) = c('AA1')
AllAa2 = data.frame(unique(data$ancestral_aa)); nrow(AllAa2); names(AllAa2) = c('AA2')
DummyZeroes = merge(AllAa1,AllAa2)
DummyZeroes$FromAncestralToDerived=paste(DummyZeroes$AA1,DummyZeroes$AA2,sep='>')
DummyZeroes$NumberOfEvents = 0
DummyZeroes = DummyZeroes[c(3,4)]
##### rbind and aggregate FromTo and DummyZeroes
FromTo1 = rbind(FromTo,DummyZeroes)
FromTo2 = aggregate(FromTo1$NumberOfEvents, by = list(FromTo1$FromAncestralToDerived), FUN = sum)
names(FromTo2)=c('FromAncestralToDerived','NumberOfEvents')
##### DERIVE UNIQUE IDENTIFIER FOR EACH PAIR OF AMINOACIDS:
for (i in 1:nrow(FromTo2)) {FromTo2$AaPairId[i] = paste(sort(unlist(strsplit(FromTo2$FromAncestralToDerived[i],'>'))),collapse = '>') }
View(FromTo2)
A = FromTo2[FromTo2$FromAncestralToDerived == FromTo2$AaPairId,]
B = FromTo2[FromTo2$FromAncestralToDerived != FromTo2$AaPairId,]
View(A)
rm(list=ls(all=TRUE))
#indata <- read.csv("/home/alima/arrr/fulltreeCodons.csv", header = TRUE, sep = ";") #читаю файл
data = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
#### FILTER OUT:
data <- subset(data, synonymous == "non-synonymous" & derived_aa != "Ambiguous" & derived_aa != "Asn/Asp" & derived_aa != "Gln/Glu" & derived_aa != "Leu/Ile" & gene_info != "mRNA_ND6")  #убираю лишнее
table(data$derived_aa)
## ADD FILTER OF BACKGROUND (THE SAME NEIGHBOR NUCLEOTIDES)
##### DERIVE SUBSTITUTION MATRIX FromTo
data$FromTo = paste(data$ancestral_aa,data$derived_aa,sep = '>')
FromTo = data.frame(table(data$FromTo))
names(FromTo) = c('FromAncestralToDerived', 'NumberOfEvents')
nrow(FromTo) # 236, but totally there are 21*21 possibilities
FromTo$FromAncestralToDerived = as.character(FromTo$FromAncestralToDerived)
##### ADD DUMMY MATRIX WITH ZEROES
AllAa1 = data.frame(unique(data$ancestral_aa)); nrow(AllAa1); names(AllAa1) = c('AA1')
AllAa2 = data.frame(unique(data$ancestral_aa)); nrow(AllAa2); names(AllAa2) = c('AA2')
DummyZeroes = merge(AllAa1,AllAa2)
DummyZeroes$FromAncestralToDerived=paste(DummyZeroes$AA1,DummyZeroes$AA2,sep='>')
DummyZeroes$NumberOfEvents = 0
DummyZeroes = DummyZeroes[c(3,4)]
##### rbind and aggregate FromTo and DummyZeroes
FromTo1 = rbind(FromTo,DummyZeroes)
FromTo2 = aggregate(FromTo1$NumberOfEvents, by = list(FromTo1$FromAncestralToDerived), FUN = sum)
names(FromTo2)=c('FromAncestralToDerived','NumberOfEvents')
FromTo2$From = gsub(">.*",'',FromTo2$FromAncestralToDerived)
FromTo2$To = gsub(".*>",'',FromTo2$FromAncestralToDerived)
FromTo2 = FromTo2[FromTo2$From != FromTo2$To,]
nrow(FromTo2)
for (i in 1:nrow(FromTo2)) {FromTo2$AaPairId[i] = paste(sort(unlist(strsplit(FromTo2$FromAncestralToDerived[i],'>'))),collapse = '>') }
A = FromTo2[FromTo2$FromAncestralToDerived == FromTo2$AaPairId,]
B = FromTo2[FromTo2$FromAncestralToDerived != FromTo2$AaPairId,]
View(A)
View(B)
rm(list=ls(all=TRUE))
#indata <- read.csv("/home/alima/arrr/fulltreeCodons.csv", header = TRUE, sep = ";") #читаю файл
data = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
#### FILTER OUT:
data <- subset(data, synonymous == "non-synonymous" & derived_aa != "Ambiguous" & derived_aa != "Asn/Asp" & derived_aa != "Gln/Glu" & derived_aa != "Leu/Ile" & gene_info != "mRNA_ND6")  #убираю лишнее
table(data$derived_aa)
## ADD FILTER OF BACKGROUND (THE SAME NEIGHBOR NUCLEOTIDES)
##### DERIVE SUBSTITUTION MATRIX FromTo
data$FromTo = paste(data$ancestral_aa,data$derived_aa,sep = '>')
FromTo = data.frame(table(data$FromTo))
names(FromTo) = c('FromAncestralToDerived', 'NumberOfEvents')
nrow(FromTo) # 236, but totally there are 21*21 possibilities
FromTo$FromAncestralToDerived = as.character(FromTo$FromAncestralToDerived)
##### ADD DUMMY MATRIX WITH ZEROES
AllAa1 = data.frame(unique(data$ancestral_aa)); nrow(AllAa1); names(AllAa1) = c('AA1')
AllAa2 = data.frame(unique(data$ancestral_aa)); nrow(AllAa2); names(AllAa2) = c('AA2')
DummyZeroes = merge(AllAa1,AllAa2)
DummyZeroes$FromAncestralToDerived=paste(DummyZeroes$AA1,DummyZeroes$AA2,sep='>')
DummyZeroes$NumberOfEvents = 0
DummyZeroes = DummyZeroes[c(3,4)]
##### rbind and aggregate FromTo and DummyZeroes
FromTo1 = rbind(FromTo,DummyZeroes)
FromTo2 = aggregate(FromTo1$NumberOfEvents, by = list(FromTo1$FromAncestralToDerived), FUN = sum)
names(FromTo2)=c('FromAncestralToDerived','NumberOfEvents')
FromTo2$From = gsub(">.*",'',FromTo2$FromAncestralToDerived)
FromTo2$To = gsub(".*>",'',FromTo2$FromAncestralToDerived)
FromTo2 = FromTo2[FromTo2$From != FromTo2$To,]; nrow(FromTo2)
##### DERIVE UNIQUE IDENTIFIER FOR EACH PAIR OF AMINOACIDS:
for (i in 1:nrow(FromTo2)) {FromTo2$AaPairId[i] = paste(sort(unlist(strsplit(FromTo2$FromAncestralToDerived[i],'>'))),collapse = '>') }
A = FromTo2[FromTo2$FromAncestralToDerived == FromTo2$AaPairId,]
B = FromTo2[FromTo2$FromAncestralToDerived != FromTo2$AaPairId,]
View(A)
A= A[c(1,2,5),];
View(A)
A = FromTo2[FromTo2$FromAncestralToDerived == FromTo2$AaPairId,]; A= A[c(1,2,5)];
View(A)
A = FromTo2[FromTo2$FromAncestralToDerived == FromTo2$AaPairId,]; A= A[c(1,2,5)]; names(A)=c('FromAncestralToDerived1','NumberOfEvents1','AaPairId')
B = FromTo2[FromTo2$FromAncestralToDerived != FromTo2$AaPairId,]; B= B[c(1,2,5)]; names(B)=c('FromAncestralToDerived2','NumberOfEvents2','AaPairId')
FromTo3 = merge(A,B)
View(FromTo3)
FromTo3$Number1To2 = FromTo3$NumberOfEvents1 / FromTo3$NumberOfEvents2
View(FromTo3)
FromTo3$NumberOfEvents1To2 = FromTo3$NumberOfEvents1 / FromTo3$NumberOfEvents2
exp = read.table("../../Body/2Derived/ExpectedAaSubstitutionDirection.txt", header = TRUE, sep = " ")
View(exp)
rm(list=ls(all=TRUE))
#indata <- read.csv("/home/alima/arrr/fulltreeCodons.csv", header = TRUE, sep = ";") #читаю файл
data = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
#### FILTER OUT:
data <- subset(data, synonymous == "non-synonymous" & derived_aa != "Ambiguous" & derived_aa != "Asn/Asp" & derived_aa != "Gln/Glu" & derived_aa != "Leu/Ile" & gene_info != "mRNA_ND6")  #убираю лишнее
table(data$derived_aa)
## ADD FILTER OF BACKGROUND (THE SAME NEIGHBOR NUCLEOTIDES)
##### DERIVE SUBSTITUTION MATRIX FromTo
data$FromTo = paste(data$ancestral_aa,data$derived_aa,sep = '>')
FromTo = data.frame(table(data$FromTo))
names(FromTo) = c('FromAncestralToDerived', 'NumberOfEvents')
nrow(FromTo) # 236, but totally there are 21*21 possibilities
FromTo$FromAncestralToDerived = as.character(FromTo$FromAncestralToDerived)
##### ADD DUMMY MATRIX WITH ZEROES
AllAa1 = data.frame(unique(data$ancestral_aa)); nrow(AllAa1); names(AllAa1) = c('AA1')
AllAa2 = data.frame(unique(data$ancestral_aa)); nrow(AllAa2); names(AllAa2) = c('AA2')
DummyZeroes = merge(AllAa1,AllAa2)
DummyZeroes$FromAncestralToDerived=paste(DummyZeroes$AA1,DummyZeroes$AA2,sep='>')
DummyZeroes$NumberOfEvents = 0
DummyZeroes = DummyZeroes[c(3,4)]
##### rbind and aggregate FromTo and DummyZeroes
FromTo1 = rbind(FromTo,DummyZeroes)
FromTo2 = aggregate(FromTo1$NumberOfEvents, by = list(FromTo1$FromAncestralToDerived), FUN = sum)
names(FromTo2)=c('FromAncestralToDerived','NumberOfEvents')
FromTo2$From = gsub(">.*",'',FromTo2$FromAncestralToDerived)
FromTo2$To = gsub(".*>",'',FromTo2$FromAncestralToDerived)
FromTo2 = FromTo2[FromTo2$From != FromTo2$To,]; nrow(FromTo2)
##### DERIVE UNIQUE IDENTIFIER FOR EACH PAIR OF AMINOACIDS:
for (i in 1:nrow(FromTo2)) {FromTo2$AaPairId[i] = paste(sort(unlist(strsplit(FromTo2$FromAncestralToDerived[i],'>'))),collapse = '>') }
##### from 420 to 210 rows and NumberOfEvents1To2
A = FromTo2[FromTo2$FromAncestralToDerived == FromTo2$AaPairId,]; A= A[c(1,2,5)]; names(A)=c('FromAncestralToDerived1','NumberOfEvents1','AaPairId')
B = FromTo2[FromTo2$FromAncestralToDerived != FromTo2$AaPairId,]; B= B[c(1,2,5)]; names(B)=c('FromAncestralToDerived2','NumberOfEvents2','AaPairId')
FromTo3 = merge(A,B)
FromTo3$NumberOfEvents1To2 = FromTo3$NumberOfEvents1 / FromTo3$NumberOfEvents2
##### read expectations:
exp = read.table("../../Body/2Derived/ExpectedAaSubstitutionDirection.txt", header = TRUE, sep = " ")
View(exp)
exp=exp[c[3]]
exp=exp[c(3)]
View(exp)
exp = read.table("../../Body/2Derived/ExpectedAaSubstitutionDirection.txt", header = TRUE, sep = " ")
for (i in 1:nrow(exp)) {exp$AaPairId[i] = paste(sort(unlist(strsplit(exp$ExpectedAminoAcidSubstBias[i],'>'))),collapse = '>') }
View(exp)
exp=exp[c(3,4)]
FromTo4 = merge(FromTo3,exp, by = 'AaPairId')
FromTo4 = merge(FromTo3,exp, by = 'AaPairId', all.x = TRUE)
View(FromTo4)
i = 17
(!is.na(FromTo4$ExpectedAminoAcidSubstBias[i])
)
(!is.na(FromTo4$ExpectedAminoAcidSubstBias[i]) & FromTo4$ExpectedAminoAcidSubstBias[i] == FromTo4$FromAncestralToDerived1)
(!is.na(FromTo4$ExpectedAminoAcidSubstBias[i]) & FromTo4$ExpectedAminoAcidSubstBias[i] == FromTo4$FromAncestralToDerived1[i])
if (!is.na(FromTo4$ExpectedAminoAcidSubstBias[i]) & FromTo4$ExpectedAminoAcidSubstBias[i] == FromTo4$FromAncestralToDerived1[i]) {FromTo4$ExpectedMoreThanOne[i] = FromTo4$NumberOfEvents1[i] / FromTo4$NumberOfEvents2[i]}
for (i in 1:nrow(FromTo4))
{ # i = 17
if (!is.na(FromTo4$ExpectedAminoAcidSubstBias[i]) & FromTo4$ExpectedAminoAcidSubstBias[i] == FromTo4$FromAncestralToDerived1[i]) {FromTo4$ExpectedMoreThanOne[i] = FromTo4$NumberOfEvents1[i] / FromTo4$NumberOfEvents2[i]}
if (!is.na(FromTo4$ExpectedAminoAcidSubstBias[i]) & FromTo4$ExpectedAminoAcidSubstBias[i] == FromTo4$FromAncestralToDerived2[i]) {FromTo4$ExpectedMoreThanOne[i] = FromTo4$NumberOfEvents2[i] / FromTo4$NumberOfEvents1[i]}
}
for (i in 1:nrow(FromTo4))
{ # i = 17
if (!is.na(FromTo4$ExpectedAminoAcidSubstBias[i]) & FromTo4$ExpectedAminoAcidSubstBias[i] == FromTo4$FromAncestralToDerived1[i]) {FromTo4$ExpectedMoreThanOne[i] = FromTo4$NumberOfEvents1[i] / FromTo4$NumberOfEvents2[i]}
if (!is.na(FromTo4$ExpectedAminoAcidSubstBias[i]) & FromTo4$ExpectedAminoAcidSubstBias[i] == FromTo4$FromAncestralToDerived2[i]) {FromTo4$ExpectedMoreThanOne[i] = FromTo4$NumberOfEvents2[i] / FromTo4$NumberOfEvents1[i]}
}
FromTo4$ExpectedMoreThanOne=''
for (i in 1:nrow(FromTo4))
{ # i = 17
if (!is.na(FromTo4$ExpectedAminoAcidSubstBias[i]) & FromTo4$ExpectedAminoAcidSubstBias[i] == FromTo4$FromAncestralToDerived1[i]) {FromTo4$ExpectedMoreThanOne[i] = FromTo4$NumberOfEvents1[i] / FromTo4$NumberOfEvents2[i]}
if (!is.na(FromTo4$ExpectedAminoAcidSubstBias[i]) & FromTo4$ExpectedAminoAcidSubstBias[i] == FromTo4$FromAncestralToDerived2[i]) {FromTo4$ExpectedMoreThanOne[i] = FromTo4$NumberOfEvents2[i] / FromTo4$NumberOfEvents1[i]}
}
View(FromTo4)
FromTo4$ExpectedMoreThanOne=NA
for (i in 1:nrow(FromTo4))
{ # i = 17
if (!is.na(FromTo4$ExpectedAminoAcidSubstBias[i]) & FromTo4$ExpectedAminoAcidSubstBias[i] == FromTo4$FromAncestralToDerived1[i]) {FromTo4$ExpectedMoreThanOne[i] = FromTo4$NumberOfEvents1[i] / FromTo4$NumberOfEvents2[i]}
if (!is.na(FromTo4$ExpectedAminoAcidSubstBias[i]) & FromTo4$ExpectedAminoAcidSubstBias[i] == FromTo4$FromAncestralToDerived2[i]) {FromTo4$ExpectedMoreThanOne[i] = FromTo4$NumberOfEvents2[i] / FromTo4$NumberOfEvents1[i]}
}
summary(FromTo4$ExpectedMoreThanOne)
hist(FromTo4$ExpectedMoreThanOne)
hist(FromTo4$ExpectedMoreThanOne,breaks = 100)
wilcox.test(FromTo4$ExpectedMoreThanOne, mu = 1)
View(FromTo4)
FromTo4 = FromTo4[sort(FromTo4$ExpectedMoreThanOne),]
rm(list=ls(all=TRUE))
#indata <- read.csv("/home/alima/arrr/fulltreeCodons.csv", header = TRUE, sep = ";") #читаю файл
data = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
#### FILTER OUT:
data <- subset(data, synonymous == "non-synonymous" & derived_aa != "Ambiguous" & derived_aa != "Asn/Asp" & derived_aa != "Gln/Glu" & derived_aa != "Leu/Ile" & gene_info != "mRNA_ND6")  #убираю лишнее
table(data$derived_aa)
## ADD FILTER OF BACKGROUND (THE SAME NEIGHBOR NUCLEOTIDES)
##### DERIVE SUBSTITUTION MATRIX FromTo
data$FromTo = paste(data$ancestral_aa,data$derived_aa,sep = '>')
FromTo = data.frame(table(data$FromTo))
names(FromTo) = c('FromAncestralToDerived', 'NumberOfEvents')
nrow(FromTo) # 236, but totally there are 21*21 possibilities
FromTo$FromAncestralToDerived = as.character(FromTo$FromAncestralToDerived)
##### ADD DUMMY MATRIX WITH ZEROES
AllAa1 = data.frame(unique(data$ancestral_aa)); nrow(AllAa1); names(AllAa1) = c('AA1')
AllAa2 = data.frame(unique(data$ancestral_aa)); nrow(AllAa2); names(AllAa2) = c('AA2')
DummyZeroes = merge(AllAa1,AllAa2)
DummyZeroes$FromAncestralToDerived=paste(DummyZeroes$AA1,DummyZeroes$AA2,sep='>')
DummyZeroes$NumberOfEvents = 0
DummyZeroes = DummyZeroes[c(3,4)]
##### rbind and aggregate FromTo and DummyZeroes
FromTo1 = rbind(FromTo,DummyZeroes)
FromTo2 = aggregate(FromTo1$NumberOfEvents, by = list(FromTo1$FromAncestralToDerived), FUN = sum)
names(FromTo2)=c('FromAncestralToDerived','NumberOfEvents')
FromTo2$From = gsub(">.*",'',FromTo2$FromAncestralToDerived)
FromTo2$To = gsub(".*>",'',FromTo2$FromAncestralToDerived)
FromTo2 = FromTo2[FromTo2$From != FromTo2$To,]; nrow(FromTo2)
##### DERIVE UNIQUE IDENTIFIER FOR EACH PAIR OF AMINOACIDS:
for (i in 1:nrow(FromTo2)) {FromTo2$AaPairId[i] = paste(sort(unlist(strsplit(FromTo2$FromAncestralToDerived[i],'>'))),collapse = '>') }
##### from 420 to 210 rows and NumberOfEvents1To2
A = FromTo2[FromTo2$FromAncestralToDerived == FromTo2$AaPairId,]; A= A[c(1,2,5)]; names(A)=c('FromAncestralToDerived1','NumberOfEvents1','AaPairId')
B = FromTo2[FromTo2$FromAncestralToDerived != FromTo2$AaPairId,]; B= B[c(1,2,5)]; names(B)=c('FromAncestralToDerived2','NumberOfEvents2','AaPairId')
FromTo3 = merge(A,B)
FromTo3$NumberOfEvents1To2 = FromTo3$NumberOfEvents1 / FromTo3$NumberOfEvents2
##### read expectations:
exp = read.table("../../Body/2Derived/ExpectedAaSubstitutionDirection.txt", header = TRUE, sep = " ")
for (i in 1:nrow(exp)) {exp$AaPairId[i] = paste(sort(unlist(strsplit(exp$ExpectedAminoAcidSubstBias[i],'>'))),collapse = '>') }
exp=exp[c(3,4)]
FromTo4 = merge(FromTo3,exp, by = 'AaPairId', all.x = TRUE)
#####
FromTo4$ExpectedMoreThanOne=NA
for (i in 1:nrow(FromTo4))
{ # i = 17
if (!is.na(FromTo4$ExpectedAminoAcidSubstBias[i]) & FromTo4$ExpectedAminoAcidSubstBias[i] == FromTo4$FromAncestralToDerived1[i]) {FromTo4$ExpectedMoreThanOne[i] = FromTo4$NumberOfEvents1[i] / FromTo4$NumberOfEvents2[i]}
if (!is.na(FromTo4$ExpectedAminoAcidSubstBias[i]) & FromTo4$ExpectedAminoAcidSubstBias[i] == FromTo4$FromAncestralToDerived2[i]) {FromTo4$ExpectedMoreThanOne[i] = FromTo4$NumberOfEvents2[i] / FromTo4$NumberOfEvents1[i]}
}
FromTo4 = FromTo4[order(FromTo4$ExpectedMoreThanOne)]
FromTo4 = FromTo4[order(FromTo4$ExpectedMoreThanOne),]
View(FromTo4)

strsplit(exp$ExpectedAminoAcidSubstBias,"_")[2]
strsplit(exp$ExpectedAminoAcidSubstBias,"_")[,2]
strsplit(exp$ExpectedAminoAcidSubstBias,"_")[2,]
strsplit(exp$ExpectedAminoAcidSubstBias,"_")
exp = read.table("../../Body/2Derived/ExpectedAaSubstitutionDirection.txt", header = TRUE, sep = " ")
exp$ExpectedAminoAcidSubstBias = gsub('>','_',exp$ExpectedAminoAcidSubstBias)
exp$ContrExpectedAminoAcidSubstBias = strsplit(exp$ExpectedAminoAcidSubstBias,"_")
View(exp)
exp$ContrExpectedAminoAcidSubstBias = unlist(strsplit(exp$ExpectedAminoAcidSubstBias,"_"))
i = 1
unlist(strsplit(exp$ExpectedAminoAcidSubstBias[i],"_"))
unlist(strsplit(exp$ExpectedAminoAcidSubstBias[i],"_"))[2]
paste(unlist(strsplit(exp$ExpectedAminoAcidSubstBias[i],"_"))[2],unlist(strsplit(exp$ExpectedAminoAcidSubstBias[i],"_"))[1],sep = '_')
exp$ContrExpectedAminoAcidSubstBias[i]
exp = read.table("../../Body/2Derived/ExpectedAaSubstitutionDirection.txt", header = TRUE, sep = " ")
exp$ExpectedAminoAcidSubstBias = gsub('>','_',exp$ExpectedAminoAcidSubstBias)
exp$ContrExpectedAminoAcidSubstBias[i] = paste(unlist(strsplit(exp$ExpectedAminoAcidSubstBias[i],"_"))[2],unlist(strsplit(exp$ExpectedAminoAcidSubstBias[i],"_"))[1],sep = '_')
exp = read.table("../../Body/2Derived/ExpectedAaSubstitutionDirection.txt", header = TRUE, sep = " ")
exp$ExpectedAminoAcidSubstBias = gsub('>','_',exp$ExpectedAminoAcidSubstBias)
for (i in 1:nrow(exp))
{ # i = 1
exp$ContrExpectedAminoAcidSubstBias[i] = paste(unlist(strsplit(exp$ExpectedAminoAcidSubstBias[i],"_"))[2],unlist(strsplit(exp$ExpectedAminoAcidSubstBias[i],"_"))[1],sep = '_')
}
View(exp)
data1[data1$Var1 == exp$ExpectedAminoAcidSubstBias[i],]$Freq
exp$ExpectedAminoAcidSubstBias[i]
exp$ExpectedAminoAcidSubstBiasNumberRare[i] = data1[data1$Var1 == exp$ExpectedAminoAcidSubstBias[i],]$Freq
exp$ExpectedAminoAcidSubstBiasNumberCommon[i] = data2[data2$Var1 == exp$ExpectedAminoAcidSubstBias[i],]$Freq
exp$ExpectedAminoAcidSubstBiasNumberCommon[i]
data2 = data.frame(table(temp2$AaSubst));
View(data2)
exp$ExpectedAminoAcidSubstBiasNumberRare[i] = data1[data1$Var1 == exp$ExpectedAminoAcidSubstBias[i],]$Freq
exp$ExpectedAminoAcidSubstBiasNumberCommon[i] = data2[data2$Var1 == exp$ExpectedAminoAcidSubstBias[i],]$Freq
exp$ContrExpectedAminoAcidSubstBiasNumberRare[i] = data1[data1$Var1 == exp$ContrExpectedAminoAcidSubstBias[i],]$Freq
exp$ContrExpectedAminoAcidSubstBiasNumberCommon[i] = data2[data2$Var1 == exp$ContrExpectedAminoAcidSubstBias[i],]$Freq
for (i in 1:nrow(exp))
{ # i = 1
exp$ExpectedAminoAcidSubstBiasNumberRare[i] = data1[data1$Var1 == exp$ExpectedAminoAcidSubstBias[i],]$Freq
exp$ExpectedAminoAcidSubstBiasNumberCommon[i] = data2[data2$Var1 == exp$ExpectedAminoAcidSubstBias[i],]$Freq
exp$ContrExpectedAminoAcidSubstBiasNumberRare[i] = data1[data1$Var1 == exp$ContrExpectedAminoAcidSubstBias[i],]$Freq
exp$ContrExpectedAminoAcidSubstBiasNumberCommon[i] = data2[data2$Var1 == exp$ContrExpectedAminoAcidSubstBias[i],]$Freq
}
View(exp)
rm(list=ls(all=TRUE))
#indata <- read.csv("/home/alima/arrr/fulltreeCodons.csv", header = TRUE, sep = ";") #читаю файл
data = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
#### FILTER OUT:
data <- subset(data, synonymous == "non-synonymous" & derived_aa != "Ambiguous" & derived_aa != "Asn/Asp" & derived_aa != "Gln/Glu" & derived_aa != "Leu/Ile" & gene_info != "mRNA_ND6")  #убираю лишнее
table(data$derived_aa)
data$AaSubst = paste(data$ancestral_aa,data$derived_aa, sep = '_')
## frequencies of changes in a given position versus AaSymmetry
#temp = data[(data$ancestral_aa == 'Leu' & data$derived_aa == 'Pro' ) | (data$ancestral_aa == 'Pro' & data$derived_aa == 'Leu') ,]
#temp$AaSubst = paste(temp$ancestral_aa,temp$derived_aa, sep = '_'); nrow(temp)
EvolConstOfPositions = data.frame(table(data$position));
names(EvolConstOfPositions)=c('position','HowManySubstitutions')
EvolConstOfPositions = EvolConstOfPositions[order(-EvolConstOfPositions$HowManySubstitutions),]
EvolConstOfPositionsVec1 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.95),]$position
EvolConstOfPositionsVec2 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions > quantile(EvolConstOfPositions$HowManySubstitutions,0.95),]$position
length(EvolConstOfPositionsVec1)
length(EvolConstOfPositionsVec2)
temp1 = data[data$position %in% EvolConstOfPositionsVec1,]; nrow(temp1) # 158
temp2 = data[data$position %in% EvolConstOfPositionsVec2,]; nrow(temp2) # 2781
table(temp1$AaSubst) # 87 / 71; 1.09
table(temp2$AaSubst) # 866 / 770; 1.12
data1 = data.frame(table(temp1$AaSubst));
data2 = data.frame(table(temp2$AaSubst));
#### load expectations:
exp = read.table("../../Body/2Derived/ExpectedAaSubstitutionDirection.txt", header = TRUE, sep = " ")
exp$ExpectedAminoAcidSubstBias = gsub('>','_',exp$ExpectedAminoAcidSubstBias)
for (i in 1:nrow(exp))
{ # i = 1
exp$ContrExpectedAminoAcidSubstBias[i] = paste(unlist(strsplit(exp$ExpectedAminoAcidSubstBias[i],"_"))[2],unlist(strsplit(exp$ExpectedAminoAcidSubstBias[i],"_"))[1],sep = '_')
}
View(exp)
View(exp)
for (i in 1:nrow(exp))
{ # i = 1
exp$ExpectedAminoAcidSubstBiasNumberRare[i] = data1[data1$Var1 == exp$ExpectedAminoAcidSubstBias[i],]$Freq
exp$ExpectedAminoAcidSubstBiasNumberCommon[i] = data2[data2$Var1 == exp$ExpectedAminoAcidSubstBias[i],]$Freq
exp$ContrExpectedAminoAcidSubstBiasNumberRare[i] = data1[data1$Var1 == exp$ContrExpectedAminoAcidSubstBias[i],]$Freq
exp$ContrExpectedAminoAcidSubstBiasNumberCommon[i] = data2[data2$Var1 == exp$ContrExpectedAminoAcidSubstBias[i],]$Freq
}
i
data1[data1$Var1 == exp$ExpectedAminoAcidSubstBias[i],]$Freq
data2[data2$Var1 == exp$ExpectedAminoAcidSubstBias[i],]$Freq
data1[data1$Var1 == exp$ContrExpectedAminoAcidSubstBias[i],]$Freq
data2[data2$Var1 == exp$ContrExpectedAminoAcidSubstBias[i],]$Freq
View(data2)
View(data1)
data2[data2$Var1 == exp$ContrExpectedAminoAcidSubstBias[i],]$Freq
exp$ExpectedAminoAcidSubstBiasNumberRare = 0
exp$ExpectedAminoAcidSubstBiasNumberCommon = 0
exp$ContrExpectedAminoAcidSubstBiasNumberRare = 0
exp$ContrExpectedAminoAcidSubstBiasNumberCommon = 0
for (i in 1:nrow(exp))
{ # i = 1
exp$ExpectedAminoAcidSubstBiasNumberRare[i] = data1[data1$Var1 == exp$ExpectedAminoAcidSubstBias[i],]$Freq
exp$ExpectedAminoAcidSubstBiasNumberCommon[i] = data2[data2$Var1 == exp$ExpectedAminoAcidSubstBias[i],]$Freq
exp$ContrExpectedAminoAcidSubstBiasNumberRare[i] = data1[data1$Var1 == exp$ContrExpectedAminoAcidSubstBias[i],]$Freq
exp$ContrExpectedAminoAcidSubstBiasNumberCommon[i] = data2[data2$Var1 == exp$ContrExpectedAminoAcidSubstBias[i],]$Freq
}
if (nrow(data1[data1$Var1 == exp$ExpectedAminoAcidSubstBias[i],])>0) {exp$ExpectedAminoAcidSubstBiasNumberRare[i] = data1[data1$Var1 == exp$ExpectedAminoAcidSubstBias[i],]$Freq}
for (i in 1:nrow(exp))
{ # i = 1
if (nrow(data1[data1$Var1 == exp$ExpectedAminoAcidSubstBias[i],])>0) {exp$ExpectedAminoAcidSubstBiasNumberRare[i] = data1[data1$Var1 == exp$ExpectedAminoAcidSubstBias[i],]$Freq}
if (nrow(data2[data2$Var1 == exp$ExpectedAminoAcidSubstBias[i],])>0) {exp$ExpectedAminoAcidSubstBiasNumberCommon[i] = data2[data2$Var1 == exp$ExpectedAminoAcidSubstBias[i],]$Freq}
if (nrow(data1[data1$Var1 == exp$ContrExpectedAminoAcidSubstBias[i],])>0) {exp$ContrExpectedAminoAcidSubstBiasNumberRare[i] = data1[data1$Var1 == exp$ContrExpectedAminoAcidSubstBias[i],]$Freq}
if (nrow(data2[data2$Var1 == exp$ContrExpectedAminoAcidSubstBias[i],])>0) {exp$ContrExpectedAminoAcidSubstBiasNumberCommon[i] = data2[data2$Var1 == exp$ContrExpectedAminoAcidSubstBias[i],]$Freq}
}
View(exp)
exp$ExpectedAminoAcidSubstBiasNumberRare[i],exp$EContrxpectedAminoAcidSubstBiasNumberRare[i]
X = rbind(c(exp$ExpectedAminoAcidSubstBiasNumberRare[i],exp$EContrxpectedAminoAcidSubstBiasNumberRare[i]),c(exp$ExpectedAminoAcidSubstBiasNumberCommon[i],exp$EContrxpectedAminoAcidSubstBiasNumberCommon[i]))
X
c(exp$ExpectedAminoAcidSubstBiasNumberRare[i],exp$EContrxpectedAminoAcidSubstBiasNumberRare[i])
X = rbind(c(exp$ExpectedAminoAcidSubstBiasNumberRare[i],exp$ContrExpectedAminoAcidSubstBiasNumberRare[i]),c(exp$ExpectedAminoAcidSubstBiasNumberCommon[i],exp$ContrExpectedAminoAcidSubstBiasNumberCommon[i]))
X
fisher.test(X, alternative = 'less')
summary(fisher.test(X, alternative = 'less'))
FT = fisher.test(X, alternative = 'less')
summary(FT)
FT
FT$estimate
exp$Odds[i] = FT$estimate
exp$Odds[i]
exp$Odds = 0
for (i in 1:nrow(exp))
{ # i = 1
X = rbind(c(exp$ExpectedAminoAcidSubstBiasNumberRare[i],exp$ContrExpectedAminoAcidSubstBiasNumberRare[i]),c(exp$ExpectedAminoAcidSubstBiasNumberCommon[i],exp$ContrExpectedAminoAcidSubstBiasNumberCommon[i]))
FT = fisher.test(X, alternative = 'less')
exp$Odds[i] = FT$estimate
}
View(exp)
X = rbind(c(sum(exp$ExpectedAminoAcidSubstBiasNumberRare),sum(exp$ContrExpectedAminoAcidSubstBiasNumberRare)),c(sum(exp$ExpectedAminoAcidSubstBiasNumberCommon),sum(exp$ContrExpectedAminoAcidSubstBiasNumberCommon))
)
X = rbind(c(sum(exp$ExpectedAminoAcidSubstBiasNumberRare),sum(exp$ContrExpectedAminoAcidSubstBiasNumberRare)),c(sum(exp$ExpectedAminoAcidSubstBiasNumberCommon),sum(exp$ContrExpectedAminoAcidSubstBiasNumberCommon)))
X
FT = fisher.test(X, alternative = 'less')
FT
rm(list=ls(all=TRUE))
pdf("../../Body/4Figures/Alima03.AaAsymmetry&ConstraintsKP.pdf",)
data = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
View(data)
data = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
data = data[data$note == 'normal',] # filter out everything except protein-coding mutations:
table(data$ancestral_aa)
VecOfNormalAa = unique(Pc$ancestral_aa); length(VecOfNormalAa)
VecOfNormalAa = unique(data$ancestral_aa); length(VecOfNormalAa)
table(data$derived_aa) # Ambiguous, Asn/Asp, Gln/Glu, Leu/Ile => why all noisy AA only among derived??!!!!!!!!!!!!!!!!
data = data[data$derived_aa %in% VecOfNormalAa,]
rm(list=ls(all=TRUE))
pdf("../../Body/4Figures/Alima03.AaAsymmetry&ConstraintsKP.pdf",)
data = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
data = data[data$note == 'normal',] # filter out everything except protein-coding mutations:
table(data$ancestral_aa)
VecOfNormalAa = unique(data$ancestral_aa); length(VecOfNormalAa)
table(data$derived_aa) # Ambiguous, Asn/Asp, Gln/Glu, Leu/Ile => why all noisy AA only among derived? All of them are on external branches?
data = data[data$derived_aa %in% VecOfNormalAa,]
ExtractThird<-function(x) {unlist(strsplit(x,''))[3]}
data$temp1 = apply(as.matrix(data$ancestor),1,FUN = ExtractThird); data = data[data$temp1 %in% c('A','T','G','C'),]
data$temp2 = apply(as.matrix(data$descendant),1,FUN = ExtractThird); data = data[data$temp2 %in% c('A','T','G','C'),]
data$Subst = paste(data$temp1,data$temp2,sep='')
table(data$Subst)
nrow(data) # 292532
ExtractFirst<-function(x) {unlist(strsplit(x,''))[1]}
data$Pos1Anc = apply(as.matrix(data$ancestor),1,FUN = ExtractFirst);   data = data[data$Pos1Anc %in% c('a','t','g','c'),]
data$Pos1Der = apply(as.matrix(data$descendant),1,FUN = ExtractFirst); data = data[data$Pos1Der %in% c('a','t','g','c'),]
data=data[data$Pos1Anc == data$Pos1Der,]; nrow(data)
data$Pos5Anc = apply(as.matrix(data$ancestor),1,FUN = ExtractFifth);   data = data[data$Pos5Anc %in% c('a','t','g','c'),]
ExtractFifth<-function(x) {unlist(strsplit(x,''))[5]}
data$Pos5Anc = apply(as.matrix(data$ancestor),1,FUN = ExtractFifth);   data = data[data$Pos5Anc %in% c('a','t','g','c'),]
data$Pos5Der = apply(as.matrix(data$descendant),1,FUN = ExtractFifth); data = data[data$Pos5Der %in% c('a','t','g','c'),]
data=data[data$Pos5Anc == data$Pos5Der,]; nrow(data)
ExtractSecond<-function(x) {unlist(strsplit(x,''))[2]}
data$Pos2Anc = apply(as.matrix(data$ancestor),1,FUN = ExtractSecond); data = data[data$Pos2Anc %in% c('a','t','g','c'),]
data$Pos2Der = apply(as.matrix(data$descendant),1,FUN = ExtractSecond); data = data[data$Pos2Der %in% c('a','t','g','c'),]
data=data[data$Pos2Anc == data$Pos2Der,]
ExtractFourth<-function(x) {unlist(strsplit(x,''))[4]}
data$Pos4Anc = apply(as.matrix(data$ancestor),1,FUN = ExtractFourth); data = data[data$Pos4Anc %in% c('a','t','g','c'),]
data$Pos4Der = apply(as.matrix(data$descendant),1,FUN = ExtractFourth); data = data[data$Pos4Der %in% c('a','t','g','c'),]
ExtractFourth<-function(x) {unlist(strsplit(x,''))[4]}
data$Pos4Anc = apply(as.matrix(data$ancestor),1,FUN = ExtractFourth); data = data[data$Pos4Anc %in% c('a','t','g','c'),]
data$Pos4Der = apply(as.matrix(data$descendant),1,FUN = ExtractFourth); data = data[data$Pos4Der %in% c('a','t','g','c'),]
data=data[data$Pos4Anc == data$Pos4Der,]
data$Context = paste(toupper(data$Pos2Anc),data$temp1,toupper(data$Pos4Anc),sep='')
data <- subset(data, synonymous == "non-synonymous" & derived_aa != "Ambiguous" & derived_aa != "Asn/Asp" & derived_aa != "Gln/Glu" & derived_aa != "Leu/Ile" & gene_info != "mRNA_ND6")  #убираю лишнее
table(data$derived_aa)
data$AaSubst = paste(data$ancestral_aa,data$derived_aa, sep = '_')
rm(list=ls(all=TRUE))
pdf("../../Body/4Figures/Alima03.AaAsymmetry&ConstraintsKP.pdf",)
data = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
data = data[data$note == 'normal',] # filter out everything except protein-coding mutations:
table(data$ancestral_aa)
VecOfNormalAa = unique(data$ancestral_aa); length(VecOfNormalAa)
table(data$derived_aa) # Ambiguous, Asn/Asp, Gln/Glu, Leu/Ile => why all noisy AA only among derived? All of them are on external branches?
data = data[data$derived_aa %in% VecOfNormalAa,]
#### mutations are only a t g c;  Derive Subst and Context (two before and two after)
# Subst
ExtractThird<-function(x) {unlist(strsplit(x,''))[3]}
data$temp1 = apply(as.matrix(data$ancestor),1,FUN = ExtractThird); data = data[data$temp1 %in% c('A','T','G','C'),]
data$temp2 = apply(as.matrix(data$descendant),1,FUN = ExtractThird); data = data[data$temp2 %in% c('A','T','G','C'),]
data$Subst = paste(data$temp1,data$temp2,sep='')
table(data$Subst)
# FILTER FOR THE SAME BACKGROUND (Pos1Anc == Pos1Der; Pos5Anc == Pos5Der; ):
# very first (first) and very last (fifth) should be the same (important for codons - we will garantie, that in the codon there is only one substitution)
nrow(data) # 292532
ExtractFirst<-function(x) {unlist(strsplit(x,''))[1]}
data$Pos1Anc = apply(as.matrix(data$ancestor),1,FUN = ExtractFirst);   data = data[data$Pos1Anc %in% c('a','t','g','c'),]
data$Pos1Der = apply(as.matrix(data$descendant),1,FUN = ExtractFirst); data = data[data$Pos1Der %in% c('a','t','g','c'),]
data=data[data$Pos1Anc == data$Pos1Der,]; nrow(data)
ExtractFifth<-function(x) {unlist(strsplit(x,''))[5]}
data$Pos5Anc = apply(as.matrix(data$ancestor),1,FUN = ExtractFifth);   data = data[data$Pos5Anc %in% c('a','t','g','c'),]
data$Pos5Der = apply(as.matrix(data$descendant),1,FUN = ExtractFifth); data = data[data$Pos5Der %in% c('a','t','g','c'),]
data=data[data$Pos5Anc == data$Pos5Der,]; nrow(data)
# Context
ExtractSecond<-function(x) {unlist(strsplit(x,''))[2]}
data$Pos2Anc = apply(as.matrix(data$ancestor),1,FUN = ExtractSecond); data = data[data$Pos2Anc %in% c('a','t','g','c'),]
data$Pos2Der = apply(as.matrix(data$descendant),1,FUN = ExtractSecond); data = data[data$Pos2Der %in% c('a','t','g','c'),]
data=data[data$Pos2Anc == data$Pos2Der,]
ExtractFourth<-function(x) {unlist(strsplit(x,''))[4]}
data$Pos4Anc = apply(as.matrix(data$ancestor),1,FUN = ExtractFourth); data = data[data$Pos4Anc %in% c('a','t','g','c'),]
data$Pos4Der = apply(as.matrix(data$descendant),1,FUN = ExtractFourth); data = data[data$Pos4Der %in% c('a','t','g','c'),]
data=data[data$Pos4Anc == data$Pos4Der,]
data$Context = paste(toupper(data$Pos2Anc),data$temp1,toupper(data$Pos4Anc),sep='')
#### filter out synonymous
data <- subset(data, synonymous == "non-synonymous" & derived_aa != "Ambiguous" & derived_aa != "Asn/Asp" & derived_aa != "Gln/Glu" & derived_aa != "Leu/Ile" & gene_info != "mRNA_ND6")  #убираю лишнее
table(data$derived_aa)
data$AaSubst = paste(data$ancestral_aa,data$derived_aa, sep = '_')
EvolConstOfPositions = data.frame(table(data$position));
names(EvolConstOfPositions)=c('position','HowManySubstitutions')
EvolConstOfPositions = EvolConstOfPositions[order(-EvolConstOfPositions$HowManySubstitutions),]
EvolConstOfPositionsVec1 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.95),]$position
EvolConstOfPositionsVec2 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions > quantile(EvolConstOfPositions$HowManySubstitutions,0.95),]$position
length(EvolConstOfPositionsVec1)
length(EvolConstOfPositionsVec2)
temp1 = data[data$position %in% EvolConstOfPositionsVec1,]; nrow(temp1) # 158
temp2 = data[data$position %in% EvolConstOfPositionsVec2,]; nrow(temp2) # 2781
data1 = data.frame(table(temp1$AaSubst));
data2 = data.frame(table(temp2$AaSubst));
#### load expectations:
exp = read.table("../../Body/2Derived/ExpectedAaSubstitutionDirection.txt", header = TRUE, sep = " ")
exp$ExpectedAminoAcidSubstBias = gsub('>','_',exp$ExpectedAminoAcidSubstBias)
for (i in 1:nrow(exp))
{ # i = 1
exp$ContrExpectedAminoAcidSubstBias[i] = paste(unlist(strsplit(exp$ExpectedAminoAcidSubstBias[i],"_"))[2],unlist(strsplit(exp$ExpectedAminoAcidSubstBias[i],"_"))[1],sep = '_')
}
#### derive numbers for expected and contrexpected:
exp$ExpectedAminoAcidSubstBiasNumberRare = 0
exp$ExpectedAminoAcidSubstBiasNumberCommon = 0
exp$ContrExpectedAminoAcidSubstBiasNumberRare = 0
exp$ContrExpectedAminoAcidSubstBiasNumberCommon = 0
for (i in 1:nrow(exp))
{ # i = 1
if (nrow(data1[data1$Var1 == exp$ExpectedAminoAcidSubstBias[i],])>0) {exp$ExpectedAminoAcidSubstBiasNumberRare[i] = data1[data1$Var1 == exp$ExpectedAminoAcidSubstBias[i],]$Freq}
if (nrow(data2[data2$Var1 == exp$ExpectedAminoAcidSubstBias[i],])>0) {exp$ExpectedAminoAcidSubstBiasNumberCommon[i] = data2[data2$Var1 == exp$ExpectedAminoAcidSubstBias[i],]$Freq}
if (nrow(data1[data1$Var1 == exp$ContrExpectedAminoAcidSubstBias[i],])>0) {exp$ContrExpectedAminoAcidSubstBiasNumberRare[i] = data1[data1$Var1 == exp$ContrExpectedAminoAcidSubstBias[i],]$Freq}
if (nrow(data2[data2$Var1 == exp$ContrExpectedAminoAcidSubstBias[i],])>0) {exp$ContrExpectedAminoAcidSubstBiasNumberCommon[i] = data2[data2$Var1 == exp$ContrExpectedAminoAcidSubstBias[i],]$Freq}
}
exp$Odds = 0
for (i in 1:nrow(exp))
{ # i = 1
X = rbind(c(exp$ExpectedAminoAcidSubstBiasNumberRare[i],exp$ContrExpectedAminoAcidSubstBiasNumberRare[i]),c(exp$ExpectedAminoAcidSubstBiasNumberCommon[i],exp$ContrExpectedAminoAcidSubstBiasNumberCommon[i]))
FT = fisher.test(X, alternative = 'less')
exp$Odds[i] = FT$estimate
}
# altogether:
X = rbind(c(sum(exp$ExpectedAminoAcidSubstBiasNumberRare),sum(exp$ContrExpectedAminoAcidSubstBiasNumberRare)),c(sum(exp$ExpectedAminoAcidSubstBiasNumberCommon),sum(exp$ContrExpectedAminoAcidSubstBiasNumberCommon)))
FT = fisher.test(X, alternative = 'less')
FT
# trend is correct, but fisher is very weakly significant => cor.test? log regr(!!!!!!)? add grantham?
exp = exp[order(exp$GranthamDistance),]
names(exp)
ExpFinal <- exp[c("NuclPosInCodon", "NuclSubstLightChainNotation", "ExpectedAminoAcidSubstBias", "Odds", "GranthamDistance","ExpectedAminoAcidSubstBiasNumberRare","ContrExpectedAminoAcidSubstBiasNumberRare","ExpectedAminoAcidSubstBiasNumberCommon","ContrExpectedAminoAcidSubstBiasNumberCommon")]
cor.test(ExpFinal[ExpFinal$Odds >0,]$Odds,ExpFinal[ExpFinal$Odds >0,]$GranthamDistance, method = 'spearman') # POSITIVE!!!!!
plot(ExpFinal[ExpFinal$Odds >0,]$Odds,ExpFinal[ExpFinal$Odds >0,]$GranthamDistance)
wilcox.test(ExpFinal[ExpFinal$Odds >0 & ExpFinal$NuclSubstLightChainNotation == 'T>C',]$Odds,ExpFinal[ExpFinal$Odds >0 & ExpFinal$NuclSubstLightChainNotation == 'G>A',]$Odds)
boxplot(ExpFinal[ExpFinal$Odds >0 & ExpFinal$NuclSubstLightChainNotation == 'T>C',]$Odds,ExpFinal[ExpFinal$Odds >0 & ExpFinal$NuclSubstLightChainNotation == 'G>A',]$Odds, names = c('T>C','G>A'))
write.table(ExpFinal, "../../Body/3Results/Alima03.AaAsymmetry&ConstraintsKP.ExpFinal.txt")
dev.off()
View(ExpFinal)
rm(list=ls(all=TRUE))
pdf("../../Body/4Figures/Alima02.AaAsymmetryKP.pdf")
#indata <- read.csv("/home/alima/arrr/fulltreeCodons.csv", header = TRUE, sep = ";") #читаю файл
data = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
data = data[data$note == 'normal',] # filter out everything except protein-coding mutations:
table(data$ancestral_aa)
VecOfNormalAa = unique(data$ancestral_aa); length(VecOfNormalAa)
table(data$derived_aa) # Ambiguous, Asn/Asp, Gln/Glu, Leu/Ile => why all noisy AA only among derived? All of them are on external branches?
data = data[data$derived_aa %in% VecOfNormalAa,]
#### mutations are only a t g c;  Derive Subst and Context (two before and two after)
# Subst
ExtractThird<-function(x) {unlist(strsplit(x,''))[3]}
data$temp1 = apply(as.matrix(data$ancestor),1,FUN = ExtractThird); data = data[data$temp1 %in% c('A','T','G','C'),]
data$temp2 = apply(as.matrix(data$descendant),1,FUN = ExtractThird); data = data[data$temp2 %in% c('A','T','G','C'),]
data$Subst = paste(data$temp1,data$temp2,sep='')
table(data$Subst)
nrow(data) # 292532
ExtractFirst<-function(x) {unlist(strsplit(x,''))[1]}
data$Pos1Anc = apply(as.matrix(data$ancestor),1,FUN = ExtractFirst);   data = data[data$Pos1Anc %in% c('a','t','g','c'),]
data$Pos1Der = apply(as.matrix(data$descendant),1,FUN = ExtractFirst); data = data[data$Pos1Der %in% c('a','t','g','c'),]
data=data[data$Pos1Anc == data$Pos1Der,]; nrow(data)
ExtractFifth<-function(x) {unlist(strsplit(x,''))[5]}
data$Pos5Anc = apply(as.matrix(data$ancestor),1,FUN = ExtractFifth);   data = data[data$Pos5Anc %in% c('a','t','g','c'),]
data$Pos5Der = apply(as.matrix(data$descendant),1,FUN = ExtractFifth); data = data[data$Pos5Der %in% c('a','t','g','c'),]
data=data[data$Pos5Anc == data$Pos5Der,]; nrow(data)
# Context
ExtractSecond<-function(x) {unlist(strsplit(x,''))[2]}
data$Pos2Anc = apply(as.matrix(data$ancestor),1,FUN = ExtractSecond); data = data[data$Pos2Anc %in% c('a','t','g','c'),]
data$Pos2Der = apply(as.matrix(data$descendant),1,FUN = ExtractSecond); data = data[data$Pos2Der %in% c('a','t','g','c'),]
data=data[data$Pos2Anc == data$Pos2Der,]
ExtractFourth<-function(x) {unlist(strsplit(x,''))[4]}
data$Pos4Anc = apply(as.matrix(data$ancestor),1,FUN = ExtractFourth); data = data[data$Pos4Anc %in% c('a','t','g','c'),]
data$Pos4Der = apply(as.matrix(data$descendant),1,FUN = ExtractFourth); data = data[data$Pos4Der %in% c('a','t','g','c'),]
data=data[data$Pos4Anc == data$Pos4Der,]
data$Context = paste(toupper(data$Pos2Anc),data$temp1,toupper(data$Pos4Anc),sep='')
#### filter out synonymous
data <- subset(data, synonymous == "non-synonymous" & derived_aa != "Ambiguous" & derived_aa != "Asn/Asp" & derived_aa != "Gln/Glu" & derived_aa != "Leu/Ile" & gene_info != "mRNA_ND6")  #убираю лишнее
table(data$derived_aa)
data$AaSubst = paste(data$ancestral_aa,data$derived_aa, sep = '_')
table(data$derived_aa)
head(data)
##### DERIVE SUBSTITUTION MATRIX FromTo
data$FromTo = paste(data$ancestral_aa,data$derived_aa,sep = '>')
FromTo = data.frame(table(data$FromTo))
names(FromTo) = c('FromAncestralToDerived', 'NumberOfEvents')
nrow(FromTo) # 236, but totally there are 21*21 possibilities
FromTo$FromAncestralToDerived = as.character(FromTo$FromAncestralToDerived)
##### ADD DUMMY MATRIX WITH ZEROES
AllAa1 = data.frame(unique(data$ancestral_aa)); nrow(AllAa1); names(AllAa1) = c('AA1')
AllAa2 = data.frame(unique(data$ancestral_aa)); nrow(AllAa2); names(AllAa2) = c('AA2')
DummyZeroes = merge(AllAa1,AllAa2)
DummyZeroes$FromAncestralToDerived=paste(DummyZeroes$AA1,DummyZeroes$AA2,sep='>')
DummyZeroes$NumberOfEvents = 0
DummyZeroes = DummyZeroes[c(3,4)]
##### rbind and aggregate FromTo and DummyZeroes
FromTo1 = rbind(FromTo,DummyZeroes)
FromTo2 = aggregate(FromTo1$NumberOfEvents, by = list(FromTo1$FromAncestralToDerived), FUN = sum)
names(FromTo2)=c('FromAncestralToDerived','NumberOfEvents')
FromTo2$From = gsub(">.*",'',FromTo2$FromAncestralToDerived)
FromTo2$To = gsub(".*>",'',FromTo2$FromAncestralToDerived)
FromTo2 = FromTo2[FromTo2$From != FromTo2$To,]; nrow(FromTo2) # filter out synonymous changes
##### DERIVE UNIQUE IDENTIFIER FOR EACH PAIR OF AMINOACIDS BASED ON ALPHABET:
for (i in 1:nrow(FromTo2)) {FromTo2$AaPairId[i] = paste(sort(unlist(strsplit(FromTo2$FromAncestralToDerived[i],'>'))),collapse = '>') }
##### from 420 to 210 rows and NumberOfEvents1To2
A = FromTo2[FromTo2$FromAncestralToDerived == FromTo2$AaPairId,]; A= A[c(1,2,5)]; names(A)=c('FromAncestralToDerived1','NumberOfEvents1','AaPairId')
B = FromTo2[FromTo2$FromAncestralToDerived != FromTo2$AaPairId,]; B= B[c(1,2,5)]; names(B)=c('FromAncestralToDerived2','NumberOfEvents2','AaPairId')
FromTo3 = merge(A,B)
FromTo3$NumberOfEvents1To2 = FromTo3$NumberOfEvents1 / FromTo3$NumberOfEvents2
##### read expectations, add AaPairId and merge
exp = read.table("../../Body/2Derived/ExpectedAaSubstitutionDirection.txt", header = TRUE, sep = " ")
for (i in 1:nrow(exp)) {exp$AaPairId[i] = paste(sort(unlist(strsplit(exp$ExpectedAminoAcidSubstBias[i],'>'))),collapse = '>') }
# exp=exp[c(3,4)]
FromTo4 = merge(FromTo3,exp, by = 'AaPairId', all.x = TRUE)
#####
FromTo4$ExpectedMoreThanOne=NA
for (i in 1:nrow(FromTo4))
{ # i = 17
if (!is.na(FromTo4$ExpectedAminoAcidSubstBias[i]) & FromTo4$ExpectedAminoAcidSubstBias[i] == FromTo4$FromAncestralToDerived1[i]) {FromTo4$ExpectedMoreThanOne[i] = FromTo4$NumberOfEvents1[i] / FromTo4$NumberOfEvents2[i]}
if (!is.na(FromTo4$ExpectedAminoAcidSubstBias[i]) & FromTo4$ExpectedAminoAcidSubstBias[i] == FromTo4$FromAncestralToDerived2[i]) {FromTo4$ExpectedMoreThanOne[i] = FromTo4$NumberOfEvents2[i] / FromTo4$NumberOfEvents1[i]}
}
FromTo4 = FromTo4[order(FromTo4$ExpectedMoreThanOne),]
# delete variants from stop or to stop (too rare and probably deleterious => mistakes):
FromTo5 = FromTo4[!grepl('Stop',FromTo4$AaPairId),]
summary(FromTo5$ExpectedMoreThanOne)
# derive 'NumberOfExpectedAaSubst' 'NumberOfUnexpectedAaSubst'
FromTo5$NumberOfExpectedAaSubst = 0
FromTo5$NumberOfUnexpectedAaSubst = 0
for (i in 1:nrow(FromTo5[!is.na(FromTo5$ExpectedMoreThanOne),]))
{ # i = 1
if (FromTo5$FromAncestralToDerived1[i] == FromTo5$ExpectedAminoAcidSubstBias[i]) {FromTo5$NumberOfExpectedAaSubst[i] = FromTo5$NumberOfEvents1[i]; FromTo5$NumberOfUnexpectedAaSubst[i] = FromTo5$NumberOfEvents2[i];}
if (FromTo5$FromAncestralToDerived2[i] == FromTo5$ExpectedAminoAcidSubstBias[i]) {FromTo5$NumberOfExpectedAaSubst[i] = FromTo5$NumberOfEvents2[i]; FromTo5$NumberOfUnexpectedAaSubst[i] = FromTo5$NumberOfEvents1[i];}
}
hist(FromTo5$ExpectedMoreThanOne,breaks = 100)
wilcox.test(FromTo5$ExpectedMoreThanOne, mu = 1)
wilcox.test(FromTo5$ExpectedMoreThanOne, mu = 1) # p-value = 7.47e-05
FromTo5$TotalSubst = FromTo5$NumberOfExpectedAaSubst + FromTo5$NumberOfUnexpectedAaSubst
Short = FromTo5[!is.na(FromTo5$ExpectedMoreThanOne),]
Short$DummyAhGh = 0
for (i in 1:nrow(Short))
{
if (Short$NuclSubstLightChainNotation[i] == 'T>C') {Short$DummyAhGh[i] = 1}
if (Short$NuclSubstLightChainNotation[i] == 'G>A') {Short$DummyAhGh[i] = 0}
}
cor.test(Short$ExpectedMoreThanOne,Short$GranthamDistance, method = 'spearman')
cor.test(Short$TotalSubst,Short$GranthamDistance, method = 'spearman') # a bit negative: the lower Grantham, the higher number of substitutions. good
cor.test(Short$ExpectedMoreThanOne,Short$TotalSubst, method = 'spearman')
summary(lm(Short$ExpectedMoreThanOne ~ Short$TotalSubst*Short$GranthamDistance))
summary(lm(Short[Short$NuclSubstLightChainNotation == 'T>C',]$ExpectedMoreThanOne ~ Short[Short$NuclSubstLightChainNotation == 'T>C',]$TotalSubst + Short[Short$NuclSubstLightChainNotation == 'T>C',]$GranthamDistance))
## bias is higher in Ah>Gh than Ch>Th!!! why? Ah>Gh is more asymmetric on average???!!! may be yes!? check human global tree and mammalian average piechart
wilcox.test(Short[Short$NuclSubstLightChainNotation == 'G>A',]$ExpectedMoreThanOne,Short[Short$NuclSubstLightChainNotation == 'T>C',]$ExpectedMoreThanOne)
boxplot(Short[Short$NuclSubstLightChainNotation == 'G>A',]$ExpectedMoreThanOne,Short[Short$NuclSubstLightChainNotation == 'T>C',]$ExpectedMoreThanOne, names = c('Ch>Th','Ah>Gh'), ylab = 'expected shift')
summary(lm(Short$ExpectedMoreThanOne ~ Short$DummyAhGh))
Short = Short[,-c(2:6)]
View(Short)
write.table(Short,"../../Body/3Results/Alima02.AaAsymmetry.ExpectedVsObservedAaChanges.txt")
dev.off()
rm(list=ls(all=TRUE))
pdf("../../Body/4Figures/Alima02.AaAsymmetryKP.pdf")
#indata <- read.csv("/home/alima/arrr/fulltreeCodons.csv", header = TRUE, sep = ";") #читаю файл
data = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
data = data[data$note == 'normal',] # filter out everything except protein-coding mutations:
table(data$ancestral_aa)
VecOfNormalAa = unique(data$ancestral_aa); length(VecOfNormalAa)
table(data$derived_aa) # Ambiguous, Asn/Asp, Gln/Glu, Leu/Ile => why all noisy AA only among derived? All of them are on external branches?
data = data[data$derived_aa %in% VecOfNormalAa,]
#### mutations are only a t g c;  Derive Subst and Context (two before and two after)
# Subst
ExtractThird<-function(x) {unlist(strsplit(x,''))[3]}
data$temp1 = apply(as.matrix(data$ancestor),1,FUN = ExtractThird); data = data[data$temp1 %in% c('A','T','G','C'),]
data$temp2 = apply(as.matrix(data$descendant),1,FUN = ExtractThird); data = data[data$temp2 %in% c('A','T','G','C'),]
data$Subst = paste(data$temp1,data$temp2,sep='')
table(data$Subst)
# FILTER FOR THE SAME BACKGROUND (Pos1Anc == Pos1Der; Pos5Anc == Pos5Der; ):
# very first (first) and very last (fifth) should be the same (important for codons - we will garantie, that in the codon there is only one substitution)
nrow(data) # 292532
ExtractFirst<-function(x) {unlist(strsplit(x,''))[1]}
data$Pos1Anc = apply(as.matrix(data$ancestor),1,FUN = ExtractFirst);   data = data[data$Pos1Anc %in% c('a','t','g','c'),]
data$Pos1Der = apply(as.matrix(data$descendant),1,FUN = ExtractFirst); data = data[data$Pos1Der %in% c('a','t','g','c'),]
data=data[data$Pos1Anc == data$Pos1Der,]; nrow(data)
ExtractFifth<-function(x) {unlist(strsplit(x,''))[5]}
data$Pos5Anc = apply(as.matrix(data$ancestor),1,FUN = ExtractFifth);   data = data[data$Pos5Anc %in% c('a','t','g','c'),]
data$Pos5Der = apply(as.matrix(data$descendant),1,FUN = ExtractFifth); data = data[data$Pos5Der %in% c('a','t','g','c'),]
data=data[data$Pos5Anc == data$Pos5Der,]; nrow(data)
# Context
ExtractSecond<-function(x) {unlist(strsplit(x,''))[2]}
data$Pos2Anc = apply(as.matrix(data$ancestor),1,FUN = ExtractSecond); data = data[data$Pos2Anc %in% c('a','t','g','c'),]
data$Pos2Der = apply(as.matrix(data$descendant),1,FUN = ExtractSecond); data = data[data$Pos2Der %in% c('a','t','g','c'),]
data=data[data$Pos2Anc == data$Pos2Der,]
ExtractFourth<-function(x) {unlist(strsplit(x,''))[4]}
data$Pos4Anc = apply(as.matrix(data$ancestor),1,FUN = ExtractFourth); data = data[data$Pos4Anc %in% c('a','t','g','c'),]
data$Pos4Der = apply(as.matrix(data$descendant),1,FUN = ExtractFourth); data = data[data$Pos4Der %in% c('a','t','g','c'),]
data=data[data$Pos4Anc == data$Pos4Der,]
data$Context = paste(toupper(data$Pos2Anc),data$temp1,toupper(data$Pos4Anc),sep='')
#### filter out synonymous
data <- subset(data, synonymous == "non-synonymous" & derived_aa != "Ambiguous" & derived_aa != "Asn/Asp" & derived_aa != "Gln/Glu" & derived_aa != "Leu/Ile" & gene_info != "mRNA_ND6")  #убираю лишнее
table(data$derived_aa)
## ADD FILTER OF BACKGROUND (THE SAME NEIGHBOR NUCLEOTIDES)
head(data)
##### DERIVE SUBSTITUTION MATRIX FromTo
data$FromTo = paste(data$ancestral_aa,data$derived_aa,sep = '>')
FromTo = data.frame(table(data$FromTo))
names(FromTo) = c('FromAncestralToDerived', 'NumberOfEvents')
nrow(FromTo) # 236, but totally there are 21*21 possibilities
FromTo$FromAncestralToDerived = as.character(FromTo$FromAncestralToDerived)
##### ADD DUMMY MATRIX WITH ZEROES
AllAa1 = data.frame(unique(data$ancestral_aa)); nrow(AllAa1); names(AllAa1) = c('AA1')
AllAa2 = data.frame(unique(data$ancestral_aa)); nrow(AllAa2); names(AllAa2) = c('AA2')
DummyZeroes = merge(AllAa1,AllAa2)
DummyZeroes$FromAncestralToDerived=paste(DummyZeroes$AA1,DummyZeroes$AA2,sep='>')
DummyZeroes$NumberOfEvents = 0
DummyZeroes = DummyZeroes[c(3,4)]
##### rbind and aggregate FromTo and DummyZeroes
FromTo1 = rbind(FromTo,DummyZeroes)
FromTo2 = aggregate(FromTo1$NumberOfEvents, by = list(FromTo1$FromAncestralToDerived), FUN = sum)
names(FromTo2)=c('FromAncestralToDerived','NumberOfEvents')
FromTo2$From = gsub(">.*",'',FromTo2$FromAncestralToDerived)
FromTo2$To = gsub(".*>",'',FromTo2$FromAncestralToDerived)
FromTo2 = FromTo2[FromTo2$From != FromTo2$To,]; nrow(FromTo2) # filter out synonymous changes
##### DERIVE UNIQUE IDENTIFIER FOR EACH PAIR OF AMINOACIDS BASED ON ALPHABET:
for (i in 1:nrow(FromTo2)) {FromTo2$AaPairId[i] = paste(sort(unlist(strsplit(FromTo2$FromAncestralToDerived[i],'>'))),collapse = '>') }
##### from 420 to 210 rows and NumberOfEvents1To2
A = FromTo2[FromTo2$FromAncestralToDerived == FromTo2$AaPairId,]; A= A[c(1,2,5)]; names(A)=c('FromAncestralToDerived1','NumberOfEvents1','AaPairId')
B = FromTo2[FromTo2$FromAncestralToDerived != FromTo2$AaPairId,]; B= B[c(1,2,5)]; names(B)=c('FromAncestralToDerived2','NumberOfEvents2','AaPairId')
FromTo3 = merge(A,B)
FromTo3$NumberOfEvents1To2 = FromTo3$NumberOfEvents1 / FromTo3$NumberOfEvents2
##### read expectations, add AaPairId and merge
exp = read.table("../../Body/2Derived/ExpectedAaSubstitutionDirection.txt", header = TRUE, sep = " ")
for (i in 1:nrow(exp)) {exp$AaPairId[i] = paste(sort(unlist(strsplit(exp$ExpectedAminoAcidSubstBias[i],'>'))),collapse = '>') }
# exp=exp[c(3,4)]
FromTo4 = merge(FromTo3,exp, by = 'AaPairId', all.x = TRUE)
#####
FromTo4$ExpectedMoreThanOne=NA
for (i in 1:nrow(FromTo4))
{ # i = 17
if (!is.na(FromTo4$ExpectedAminoAcidSubstBias[i]) & FromTo4$ExpectedAminoAcidSubstBias[i] == FromTo4$FromAncestralToDerived1[i]) {FromTo4$ExpectedMoreThanOne[i] = FromTo4$NumberOfEvents1[i] / FromTo4$NumberOfEvents2[i]}
if (!is.na(FromTo4$ExpectedAminoAcidSubstBias[i]) & FromTo4$ExpectedAminoAcidSubstBias[i] == FromTo4$FromAncestralToDerived2[i]) {FromTo4$ExpectedMoreThanOne[i] = FromTo4$NumberOfEvents2[i] / FromTo4$NumberOfEvents1[i]}
}
FromTo4 = FromTo4[order(FromTo4$ExpectedMoreThanOne),]
# delete variants from stop or to stop (too rare and probably deleterious => mistakes):
FromTo5 = FromTo4[!grepl('Stop',FromTo4$AaPairId),]
summary(FromTo5$ExpectedMoreThanOne)
# derive 'NumberOfExpectedAaSubst' 'NumberOfUnexpectedAaSubst'
FromTo5$NumberOfExpectedAaSubst = 0
FromTo5$NumberOfUnexpectedAaSubst = 0
for (i in 1:nrow(FromTo5[!is.na(FromTo5$ExpectedMoreThanOne),]))
{ # i = 1
if (FromTo5$FromAncestralToDerived1[i] == FromTo5$ExpectedAminoAcidSubstBias[i]) {FromTo5$NumberOfExpectedAaSubst[i] = FromTo5$NumberOfEvents1[i]; FromTo5$NumberOfUnexpectedAaSubst[i] = FromTo5$NumberOfEvents2[i];}
if (FromTo5$FromAncestralToDerived2[i] == FromTo5$ExpectedAminoAcidSubstBias[i]) {FromTo5$NumberOfExpectedAaSubst[i] = FromTo5$NumberOfEvents2[i]; FromTo5$NumberOfUnexpectedAaSubst[i] = FromTo5$NumberOfEvents1[i];}
}
hist(FromTo5$ExpectedMoreThanOne,breaks = 100)
wilcox.test(FromTo5$ExpectedMoreThanOne, mu = 1) # p-value = 7.47e-05
FromTo5$TotalSubst = FromTo5$NumberOfExpectedAaSubst + FromTo5$NumberOfUnexpectedAaSubst
Short = FromTo5[!is.na(FromTo5$ExpectedMoreThanOne),]
Short$DummyAhGh = 0
for (i in 1:nrow(Short))
{
if (Short$NuclSubstLightChainNotation[i] == 'T>C') {Short$DummyAhGh[i] = 1}
if (Short$NuclSubstLightChainNotation[i] == 'G>A') {Short$DummyAhGh[i] = 0}
}
cor.test(Short$ExpectedMoreThanOne,Short$GranthamDistance, method = 'spearman')
cor.test(Short$TotalSubst,Short$GranthamDistance, method = 'spearman') # a bit negative: the lower Grantham, the higher number of substitutions. good
cor.test(Short$ExpectedMoreThanOne,Short$TotalSubst, method = 'spearman')
summary(lm(Short$ExpectedMoreThanOne ~ Short$TotalSubst*Short$GranthamDistance))
summary(lm(Short[Short$NuclSubstLightChainNotation == 'T>C',]$ExpectedMoreThanOne ~ Short[Short$NuclSubstLightChainNotation == 'T>C',]$TotalSubst + Short[Short$NuclSubstLightChainNotation == 'T>C',]$GranthamDistance))
## bias is higher in Ah>Gh than Ch>Th!!! why? Ah>Gh is more asymmetric on average???!!! may be yes!? check human global tree and mammalian average piechart
wilcox.test(Short[Short$NuclSubstLightChainNotation == 'G>A',]$ExpectedMoreThanOne,Short[Short$NuclSubstLightChainNotation == 'T>C',]$ExpectedMoreThanOne)
boxplot(Short[Short$NuclSubstLightChainNotation == 'G>A',]$ExpectedMoreThanOne,Short[Short$NuclSubstLightChainNotation == 'T>C',]$ExpectedMoreThanOne, names = c('Ch>Th','Ah>Gh'), ylab = 'expected shift')
summary(lm(Short$ExpectedMoreThanOne ~ Short$DummyAhGh))
Short = Short[,-c(2:6)]
write.table(Short,"../../Body/3Results/Alima02.AaAsymmetry.ExpectedVsObservedAaChanges.txt")
dev.off()
###### controls and permutations  (how to kill signal and derive real p-value)?
View(Short)

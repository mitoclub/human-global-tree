EvolConstOfPositions
dim(EvolConstOfPositions)
head(EvolConstOfPositions)
quantile(0.1,EvolConstOfPositions$HowManySubstitutions)
quantile(EvolConstOfPositions$HowManySubstitutions,0.1)
EvolConstOfPositions = data.frame(table(data$position));
names(EvolConstOfPositions)=c('position','HowManySubstitutions')
EvolConstOfPositions = EvolConstOfPositions[order(-EvolConstOfPositions$HowManySubstitutions),]
head(EvolConstOfPositions) # ~ helix mtDB
summary(EvolConstOfPositions$HowManySubstitutions)
dim(EvolConstOfPositions)
head(EvolConstOfPositions)
EvolConstOfPositionsVec1 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.1),]$positions)
EvolConstOfPositionsVec1 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.1),]$positions
EvolConstOfPositionsVec1
head(EvolConstOfPositions)
EvolConstOfPositionsVec1 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.1),]$position
EvolConstOfPositionsVec1
EvolConstOfPositionsVec2 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.2) & EvolConstOfPositions$HowManySubstitutions > quantile(EvolConstOfPositions$HowManySubstitutions,0.1),]$position
EvolConstOfPositionsVec2
length(EvolConstOfPositionsVec1)
length(EvolConstOfPositionsVec2)
EvolConstOfPositionsVec2 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.2) && EvolConstOfPositions$HowManySubstitutions > quantile(EvolConstOfPositions$HowManySubstitutions,0.1),]$position
length(EvolConstOfPositionsVec2)
quantile(EvolConstOfPositions$HowManySubstitutions,0.2)
EvolConstOfPositionsVec1 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.1),]$position
EvolConstOfPositionsVec2 = EvolConstOfPositions[(EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.2)) & (EvolConstOfPositions$HowManySubstitutions >= quantile(EvolConstOfPositions$HowManySubstitutions,0.1)),]$position
length(EvolConstOfPositionsVec1)
length(EvolConstOfPositionsVec2)
EvolConstOfPositionsVec3 = EvolConstOfPositions[(EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.3)) & (EvolConstOfPositions$HowManySubstitutions >= quantile(EvolConstOfPositions$HowManySubstitutions,0.2)),]$position
length(EvolConstOfPositionsVec3)
temp = data[(data$ancestral_aa == 'Leu' & data$derived_aa == 'Pro' ) | (data$ancestral_aa == 'Pro' & data$derived_aa == 'Leu') ,]
temp$AaSubst = paste(temp$ancestral_aa,temp$derived_aa, sep = '_'); nrow(temp)
rm(list=ls(all=TRUE))
#indata <- read.csv("/home/alima/arrr/fulltreeCodons.csv", header = TRUE, sep = ";") #читаю файл
data = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
data <- subset(data, synonymous == "non-synonymous" & derived_aa != "Ambiguous" & derived_aa != "Asn/Asp" & derived_aa != "Gln/Glu" & derived_aa != "Leu/Ile" & gene_info != "mRNA_ND6")  #убираю лишнее
table(data$derived_aa)
EvolConstOfPositions = data.frame(table(data$position));
View(EvolConstOfPositions)
names(EvolConstOfPositions)=c('position','HowManySubstitutions')
View(EvolConstOfPositions)
EvolConstOfPositions = EvolConstOfPositions[order(-EvolConstOfPositions$HowManySubstitutions),]
head(EvolConstOfPositions) # ~ helix mtDB
summary(EvolConstOfPositions$HowManySubstitutions)
dim(EvolConstOfPositions)
EvolConstOfPositionsVec1 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.1),]$position
EvolConstOfPositionsVec1 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.1),]$position
EvolConstOfPositionsVec2 = EvolConstOfPositions[(EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.2)) & (EvolConstOfPositions$HowManySubstitutions >= quantile(EvolConstOfPositions$HowManySubstitutions,0.1)),]$position
EvolConstOfPositionsVec3 = EvolConstOfPositions[(EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.3)) & (EvolConstOfPositions$HowManySubstitutions >= quantile(EvolConstOfPositions$HowManySubstitutions,0.2)),]$position
length(EvolConstOfPositionsVec1)
length(EvolConstOfPositionsVec2)
length(EvolConstOfPositionsVec3)
View(data)
rm(list=ls(all=TRUE))
#indata <- read.csv("/home/alima/arrr/fulltreeCodons.csv", header = TRUE, sep = ";") #читаю файл
data = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
#### FILTER OUT:
data <- subset(data, synonymous == "non-synonymous" & derived_aa != "Ambiguous" & derived_aa != "Asn/Asp" & derived_aa != "Gln/Glu" & derived_aa != "Leu/Ile" & gene_info != "mRNA_ND6")  #убираю лишнее
table(data$derived_aa)
## frequencies of changes in a given position versus AaSymmetry
temp = data[(data$ancestral_aa == 'Leu' & data$derived_aa == 'Pro' ) | (data$ancestral_aa == 'Pro' & data$derived_aa == 'Leu') ,]
View(temp)
EvolConstOfPositions = data.frame(table(temp$position));
names(EvolConstOfPositions)=c('position','HowManySubstitutions')
View(EvolConstOfPositions)
EvolConstOfPositions = EvolConstOfPositions[order(-EvolConstOfPositions$HowManySubstitutions),]
EvolConstOfPositions = data.frame(table(temp$position));
names(EvolConstOfPositions)=c('position','HowManySubstitutions')
EvolConstOfPositions = EvolConstOfPositions[order(-EvolConstOfPositions$HowManySubstitutions),]
EvolConstOfPositionsVec1 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.25),]$position
EvolConstOfPositionsVec2 = EvolConstOfPositions[(EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.5)) & (EvolConstOfPositions$HowManySubstitutions > quantile(EvolConstOfPositions$HowManySubstitutions,0.25)),]$position
EvolConstOfPositionsVec3 = EvolConstOfPositions[(EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.75)) & (EvolConstOfPositions$HowManySubstitutions > quantile(EvolConstOfPositions$HowManySubstitutions,0.5)),]$position
EvolConstOfPositionsVec4 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions > quantile(EvolConstOfPositions$HowManySubstitutions,0.75,]$position
EvolConstOfPositionsVec4 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions > quantile(EvolConstOfPositions$HowManySubstitutions,0.75),]$position
EvolConstOfPositionsVec4
EvolConstOfPositionsVec3
EvolConstOfPositionsVec1
length(EvolConstOfPositionsVec1)
length(EvolConstOfPositionsVec2)
length(EvolConstOfPositionsVec3)
EvolConstOfPositionsVec2 = EvolConstOfPositions[(EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.5)) & (EvolConstOfPositions$HowManySubstitutions > quantile(EvolConstOfPositions$HowManySubstitutions,0.25)),]$position
length(EvolConstOfPositionsVec2)
length(EvolConstOfPositionsVec1)
length(EvolConstOfPositionsVec2)
length(EvolConstOfPositionsVec3)
EvolConstOfPositionsVec1 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.5),]$position
EvolConstOfPositionsVec2 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions > quantile(EvolConstOfPositions$HowManySubstitutions,0.5),]$position
length(EvolConstOfPositionsVec1)
length(EvolConstOfPositionsVec2)
EvolConstOfPositionsVec1
temp1 = temp[temp$position %in% EvolConstOfPositionsVec1,]; nrow(temp1) # 2338
temp = data[(data$ancestral_aa == 'Leu' & data$derived_aa == 'Pro' ) | (data$ancestral_aa == 'Pro' & data$derived_aa == 'Leu') ,]
temp$AaSubst = paste(temp$ancestral_aa,temp$derived_aa, sep = '_'); nrow(temp)
temp1 = temp[temp$position %in% EvolConstOfPositionsVec1,]; nrow(temp1) # 2338
temp2 = temp[temp$position %in% EvolConstOfPositionsVec2,]; nrow(temp2) # 158
EvolConstOfPositionsVec1 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.75),]$position
EvolConstOfPositionsVec2 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions > quantile(EvolConstOfPositions$HowManySubstitutions,0.75),]$position
length(EvolConstOfPositionsVec1)
length(EvolConstOfPositionsVec2)
temp1 = temp[temp$position %in% EvolConstOfPositionsVec1,]; nrow(temp1) # 158
temp2 = temp[temp$position %in% EvolConstOfPositionsVec2,]; nrow(temp2) # 2781
EvolConstOfPositionsVec1 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.9),]$position
EvolConstOfPositionsVec2 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions > quantile(EvolConstOfPositions$HowManySubstitutions,0.9),]$position
length(EvolConstOfPositionsVec1)
length(EvolConstOfPositionsVec2)
temp1 = temp[temp$position %in% EvolConstOfPositionsVec1,]; nrow(temp1) # 158
temp2 = temp[temp$position %in% EvolConstOfPositionsVec2,]; nrow(temp2) # 2781
temp1 = temp[temp$position %in% EvolConstOfPositionsVec1,]; nrow(temp1) # 158
temp2 = temp[temp$position %in% EvolConstOfPositionsVec2,]; nrow(temp2) # 2781
table(temp1$AaSubst)
table(temp2$AaSubst)
table(temp1$AaSubst)
table(temp2$AaSubst)
table(temp1$AaSubst)
table(temp2$AaSubst)
290 / 262
table(temp2$AaSubst)
1256 / 1131
EvolConstOfPositionsVec1 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.95),]$position
EvolConstOfPositionsVec2 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions > quantile(EvolConstOfPositions$HowManySubstitutions,0.95),]$position
length(EvolConstOfPositionsVec1)
length(EvolConstOfPositionsVec2)
temp = data[(data$ancestral_aa == 'Leu' & data$derived_aa == 'Pro' ) | (data$ancestral_aa == 'Pro' & data$derived_aa == 'Leu') ,]
temp$AaSubst = paste(temp$ancestral_aa,temp$derived_aa, sep = '_'); nrow(temp)
EvolConstOfPositions = data.frame(table(temp$position));
names(EvolConstOfPositions)=c('position','HowManySubstitutions')
EvolConstOfPositions = EvolConstOfPositions[order(-EvolConstOfPositions$HowManySubstitutions),]
EvolConstOfPositionsVec1 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.95),]$position
EvolConstOfPositionsVec2 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions > quantile(EvolConstOfPositions$HowManySubstitutions,0.95),]$position
length(EvolConstOfPositionsVec1)
length(EvolConstOfPositionsVec2)
temp1 = temp[temp$position %in% EvolConstOfPositionsVec1,]; nrow(temp1) # 158
temp2 = temp[temp$position %in% EvolConstOfPositionsVec2,]; nrow(temp2) # 2781
table(temp1$AaSubst) # 290 / 262
411/380
table(temp2$AaSubst) # 1256 / 1131
1135 / 1013
data1 = data.frame(table(temp1$AaSubst))
View(data1)
data2 = data.frame(table(temp2$AaSubst))
View(data2)
data1 = data.frame(table(temp1$AaSubst)); names(data1)[2]=c('freq1')
data2 = data.frame(table(temp2$AaSubst)); names(data2)[2]=c('freq2')
data = cbind(data1,data2)
View(data)
data1 = data.frame(table(temp1$AaSubst));
data2 = data.frame(table(temp2$AaSubst));
data = cbind(data1,data2)
View(data)
data[,2]
fisher.test(data[,2],data[,4])
data[,4]
data[1,2]
fisher.test(data[1,2],data[2,2],data[1,4],data[2,4])
fisher.test(rbind(c(data[1,2],data[2,2]),c(data[1,4],data[2,4])))
fisher.test(rbind(c(data[1,2],data[2,2]),c(data[1,4],data[2,4])))
X = rbind(c(data[1,2],data[2,2]),c(data[1,4],data[2,4]))
X
X = cbind(c(data[1,2],data[2,2]),c(data[1,4],data[2,4]))
X
fisher.test(X)
EvolConstOfPositionsVec1 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.5),]$position
EvolConstOfPositionsVec2 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions > quantile(EvolConstOfPositions$HowManySubstitutions,0.95),]$position
length(EvolConstOfPositionsVec1)
length(EvolConstOfPositionsVec2)
temp1 = temp[temp$position %in% EvolConstOfPositionsVec1,]; nrow(temp1) # 158
temp2 = temp[temp$position %in% EvolConstOfPositionsVec2,]; nrow(temp2) # 2781
table(temp1$AaSubst) # 290 / 262; 411/380 = 1.08
table(temp2$AaSubst) # 1256 / 1131; 1135 / 1013 = 1.12
data1 = data.frame(table(temp1$AaSubst));
data2 = data.frame(table(temp2$AaSubst));
data = cbind(data1,data2)
X = cbind(c(data[1,2],data[2,2]),c(data[1,4],data[2,4]))
fisher.test(X)
EvolConstOfPositions = EvolConstOfPositions[order(-EvolConstOfPositions$HowManySubstitutions),]
EvolConstOfPositionsVec1 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.95),]$position
EvolConstOfPositionsVec2 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions > quantile(EvolConstOfPositions$HowManySubstitutions,0.95),]$position
length(EvolConstOfPositionsVec1)
length(EvolConstOfPositionsVec2)
temp1 = temp[temp$position %in% EvolConstOfPositionsVec1,]; nrow(temp1) # 158
temp2 = temp[temp$position %in% EvolConstOfPositionsVec2,]; nrow(temp2) # 2781
table(temp1$AaSubst) # 290 / 262; 411/380 = 1.08
table(temp2$AaSubst) # 1256 / 1131; 1135 / 1013 = 1.12
data1 = data.frame(table(temp1$AaSubst));
data2 = data.frame(table(temp2$AaSubst));
data = cbind(data1,data2)
X = cbind(c(data[1,2],data[2,2]),c(data[1,4],data[2,4]))
fisher.test(X)
EvolConstOfPositionsVec1 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.97),]$position
EvolConstOfPositionsVec2 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions > quantile(EvolConstOfPositions$HowManySubstitutions,0.97),]$position
length(EvolConstOfPositionsVec1)
length(EvolConstOfPositionsVec2)
temp1 = temp[temp$position %in% EvolConstOfPositionsVec1,]; nrow(temp1) # 158
temp2 = temp[temp$position %in% EvolConstOfPositionsVec2,]; nrow(temp2) # 2781
table(temp1$AaSubst) # 290 / 262; 411/380 = 1.08
table(temp2$AaSubst) # 1256 / 1131; 1135 / 1013 = 1.12
data1 = data.frame(table(temp1$AaSubst));
data2 = data.frame(table(temp2$AaSubst));
data = cbind(data1,data2)
X = cbind(c(data[1,2],data[2,2]),c(data[1,4],data[2,4]))
fisher.test(X)
X
EvolConstOfPositionsVec1 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.98),]$position
EvolConstOfPositionsVec2 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions > quantile(EvolConstOfPositions$HowManySubstitutions,0.98),]$position
length(EvolConstOfPositionsVec1)
length(EvolConstOfPositionsVec2)
temp1 = temp[temp$position %in% EvolConstOfPositionsVec1,]; nrow(temp1) # 158
temp2 = temp[temp$position %in% EvolConstOfPositionsVec2,]; nrow(temp2) # 2781
table(temp1$AaSubst) # 290 / 262; 411/380 = 1.08
table(temp2$AaSubst) # 1256 / 1131; 1135 / 1013 = 1.12
data1 = data.frame(table(temp1$AaSubst));
data2 = data.frame(table(temp2$AaSubst));
data = cbind(data1,data2)
X = cbind(c(data[1,2],data[2,2]),c(data[1,4],data[2,4]))
fisher.test(X)
EvolConstOfPositionsVec1 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.99),]$position
EvolConstOfPositionsVec2 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions > quantile(EvolConstOfPositions$HowManySubstitutions,0.99),]$position
length(EvolConstOfPositionsVec1)
length(EvolConstOfPositionsVec2)
temp1 = temp[temp$position %in% EvolConstOfPositionsVec1,]; nrow(temp1) # 158
temp2 = temp[temp$position %in% EvolConstOfPositionsVec2,]; nrow(temp2) # 2781
table(temp1$AaSubst) # 290 / 262; 411/380 = 1.08
table(temp2$AaSubst) # 1256 / 1131; 1135 / 1013 = 1.12
data1 = data.frame(table(temp1$AaSubst));
data2 = data.frame(table(temp2$AaSubst));
data = cbind(data1,data2)
X = cbind(c(data[1,2],data[2,2]),c(data[1,4],data[2,4]))
fisher.test(X)
EvolConstOfPositionsVec1 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.90),]$position
EvolConstOfPositionsVec2 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions > quantile(EvolConstOfPositions$HowManySubstitutions,0.90),]$position
length(EvolConstOfPositionsVec1)
length(EvolConstOfPositionsVec2)
temp1 = temp[temp$position %in% EvolConstOfPositionsVec1,]; nrow(temp1) # 158
temp2 = temp[temp$position %in% EvolConstOfPositionsVec2,]; nrow(temp2) # 2781
table(temp1$AaSubst) # 290 / 262; 411/380 = 1.08
table(temp2$AaSubst) # 1256 / 1131; 1135 / 1013 = 1.12
data1 = data.frame(table(temp1$AaSubst));
data2 = data.frame(table(temp2$AaSubst));
data = cbind(data1,data2)
X = cbind(c(data[1,2],data[2,2]),c(data[1,4],data[2,4]))
fisher.test(X)
EvolConstOfPositionsVec1 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.50),]$position
EvolConstOfPositionsVec2 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions > quantile(EvolConstOfPositions$HowManySubstitutions,0.50),]$position
length(EvolConstOfPositionsVec1)
length(EvolConstOfPositionsVec2)
temp1 = temp[temp$position %in% EvolConstOfPositionsVec1,]; nrow(temp1) # 158
temp2 = temp[temp$position %in% EvolConstOfPositionsVec2,]; nrow(temp2) # 2781
table(temp1$AaSubst) # 290 / 262; 411/380 = 1.08
table(temp2$AaSubst) # 1256 / 1131; 1135 / 1013 = 1.12
data1 = data.frame(table(temp1$AaSubst));
data2 = data.frame(table(temp2$AaSubst));
data = cbind(data1,data2)
X = cbind(c(data[1,2],data[2,2]),c(data[1,4],data[2,4]))
fisher.test(X)
EvolConstOfPositions = EvolConstOfPositions[order(-EvolConstOfPositions$HowManySubstitutions),]
EvolConstOfPositionsVec1 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.99),]$position
EvolConstOfPositionsVec2 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions > quantile(EvolConstOfPositions$HowManySubstitutions,0.99),]$position
length(EvolConstOfPositionsVec1)
length(EvolConstOfPositionsVec2)
temp1 = temp[temp$position %in% EvolConstOfPositionsVec1,]; nrow(temp1) # 158
temp2 = temp[temp$position %in% EvolConstOfPositionsVec2,]; nrow(temp2) # 2781
table(temp1$AaSubst) # 290 / 262; 411/380 = 1.08
table(temp2$AaSubst) # 1256 / 1131; 1135 / 1013 = 1.12
680 / 623
866 / 770
EvolConstOfPositionsVec1 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.5),]$position
temp1 = temp[temp$position %in% EvolConstOfPositionsVec1,]; nrow(temp1) # 158
table(temp1$AaSubst) # 680 / 623; 1.09
87 / 71
rm(list=ls(all=TRUE))
#indata <- read.csv("/home/alima/arrr/fulltreeCodons.csv", header = TRUE, sep = ";") #читаю файл
data = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
#### FILTER OUT:
data <- subset(data, synonymous == "non-synonymous" & derived_aa != "Ambiguous" & derived_aa != "Asn/Asp" & derived_aa != "Gln/Glu" & derived_aa != "Leu/Ile" & gene_info != "mRNA_ND6")  #убираю лишнее
table(data$derived_aa)
## frequencies of changes in a given position versus AaSymmetry
temp = data[(data$ancestral_aa == 'Leu' & data$derived_aa == 'Pro' ) | (data$ancestral_aa == 'Pro' & data$derived_aa == 'Leu') ,]
temp$AaSubst = paste(temp$ancestral_aa,temp$derived_aa, sep = '_'); nrow(temp)
EvolConstOfPositions = data.frame(table(temp$position));
names(EvolConstOfPositions)=c('position','HowManySubstitutions')
EvolConstOfPositions = EvolConstOfPositions[order(-EvolConstOfPositions$HowManySubstitutions),]
rm(list=ls(all=TRUE))
#indata <- read.csv("/home/alima/arrr/fulltreeCodons.csv", header = TRUE, sep = ";") #читаю файл
data = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
#### FILTER OUT:
data <- subset(data, synonymous == "non-synonymous" & derived_aa != "Ambiguous" & derived_aa != "Asn/Asp" & derived_aa != "Gln/Glu" & derived_aa != "Leu/Ile" & gene_info != "mRNA_ND6")  #убираю лишнее
table(data$derived_aa)
## frequencies of changes in a given position versus AaSymmetry
#temp = data[(data$ancestral_aa == 'Leu' & data$derived_aa == 'Pro' ) | (data$ancestral_aa == 'Pro' & data$derived_aa == 'Leu') ,]
#temp$AaSubst = paste(temp$ancestral_aa,temp$derived_aa, sep = '_'); nrow(temp)
EvolConstOfPositions = data.frame(table(data$position));
names(EvolConstOfPositions)=c('position','HowManySubstitutions')
EvolConstOfPositions = EvolConstOfPositions[order(-EvolConstOfPositions$HowManySubstitutions),]
EvolConstOfPositionsVec1 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.95),]$position
EvolConstOfPositionsVec2 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions > quantile(EvolConstOfPositions$HowManySubstitutions,0.95),]$position
length(EvolConstOfPositionsVec1)
length(EvolConstOfPositionsVec2)
temp1 = temp[temp$position %in% EvolConstOfPositionsVec1,]; nrow(temp1) # 158
temp2 = temp[temp$position %in% EvolConstOfPositionsVec2,]; nrow(temp2) # 2781
temp1 = data[data$position %in% EvolConstOfPositionsVec1,]; nrow(temp1) # 158
temp2 = data[data$position %in% EvolConstOfPositionsVec2,]; nrow(temp2) # 2781
table(temp1$AaSubst) # 87 / 71; 1.09
temp1 = data[data$position %in% EvolConstOfPositionsVec1,]; nrow(temp1) # 158
temp2 = data[data$position %in% EvolConstOfPositionsVec2,]; nrow(temp2) # 2781
table(temp1$AaSubst)
View(temp1)
data$AaSubst = paste(temp$ancestral_aa,temp$derived_aa, sep = '_'); nrow(temp)
temp1 = data[data$position %in% EvolConstOfPositionsVec1,]; nrow(temp1) # 158
temp2 = data[data$position %in% EvolConstOfPositionsVec2,]; nrow(temp2) # 2781
table(temp1$AaSubst) # 87 / 71; 1.09
rm(list=ls(all=TRUE))
#indata <- read.csv("/home/alima/arrr/fulltreeCodons.csv", header = TRUE, sep = ";") #читаю файл
data = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
#### FILTER OUT:
data <- subset(data, synonymous == "non-synonymous" & derived_aa != "Ambiguous" & derived_aa != "Asn/Asp" & derived_aa != "Gln/Glu" & derived_aa != "Leu/Ile" & gene_info != "mRNA_ND6")  #убираю лишнее
table(data$derived_aa)
data$AaSubst = paste(data$ancestral_aa,data$derived_aa, sep = '_')
EvolConstOfPositions = data.frame(table(data$position));
names(EvolConstOfPositions)=c('position','HowManySubstitutions')
EvolConstOfPositions = EvolConstOfPositions[order(-EvolConstOfPositions$HowManySubstitutions),]
EvolConstOfPositionsVec1 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.95),]$position
EvolConstOfPositionsVec2 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions > quantile(EvolConstOfPositions$HowManySubstitutions,0.95),]$position
length(EvolConstOfPositionsVec1)
length(EvolConstOfPositionsVec2)
temp1 = data[data$position %in% EvolConstOfPositionsVec1,]; nrow(temp1) # 158
temp2 = data[data$position %in% EvolConstOfPositionsVec2,]; nrow(temp2) # 2781
table(temp1$AaSubst) # 87 / 71; 1.09
table(temp2$AaSubst) # 866 / 770; 1.12
data1 = data.frame(table(temp1$AaSubst));
data2 = data.frame(table(temp2$AaSubst));
View(data1)
data1 = data.frame(table(temp1$AaSubst));
View(data1)
Leu_Pro = data1[data1$Var1 == 'Leu_Pro',]$Freq
data1[data1$Var1 == 'Leu_Pro',]$Freq
Leu_Pro = data1[data1$Var1 == 'Leu_Pro',]$Freq / data1[data1$Var1 == 'Pro_Leu',]$Freq
X = rbind(data1[data1$Var1 == 'Leu_Pro',]$Freq, data1[data1$Var1 == 'Pro_Leu',]$Freq),c(data1[data2$Var1 == 'Leu_Pro',]$Freq, data2[data1$Var1 == 'Pro_Leu',]$Freq))
X = rbind(c(data1[data1$Var1 == 'Leu_Pro',]$Freq, data1[data1$Var1 == 'Pro_Leu',]$Freq), c(data1[data2$Var1 == 'Leu_Pro',]$Freq, data2[data1$Var1 == 'Pro_Leu',]$Freq))
X = rbind(c(data1[data1$Var1 == 'Leu_Pro',]$Freq, data1[data1$Var1 == 'Pro_Leu',]$Freq), c(data2[data2$Var1 == 'Leu_Pro',]$Freq, data2[data2$Var1 == 'Pro_Leu',]$Freq))
X
fisher.test(X)
fisher.test(X, alternative = 'less')
exp = read.table("../../Body/2Derived/ExpectedAaSubstitutionDirection.txt", header = TRUE, sep = " ")
for (i in 1:nrow(exp)) {exp$AaPairId[i] = paste(sort(unlist(strsplit(exp$ExpectedAminoAcidSubstBias[i],'>'))),collapse = '>') }
exp=exp[c(3,4)]
View(exp)
exp = read.table("../../Body/2Derived/ExpectedAaSubstitutionDirection.txt", header = TRUE, sep = " ")
for (i in 1:nrow(exp)) {exp$AaPairId[i] = paste(sort(unlist(strsplit(exp$ExpectedAminoAcidSubstBias[i],'_'))),collapse = '>') }
exp=exp[c(3,4)]
exp = read.table("../../Body/2Derived/ExpectedAaSubstitutionDirection.txt", header = TRUE, sep = " ")
for (i in 1:nrow(exp)) {exp$AaPairId[i] = paste(sort(unlist(strsplit(exp$ExpectedAminoAcidSubstBias[i],'_'))),collapse = '>') }
View(exp)
exp = read.table("../../Body/2Derived/ExpectedAaSubstitutionDirection.txt", header = TRUE, sep = " ")
for (i in 1:nrow(exp)) {exp$AaPairId[i] = paste(sort(unlist(strsplit(exp$ExpectedAminoAcidSubstBias[i],'_'))),collapse = '_') }
View(exp)
exp = read.table("../../Body/2Derived/ExpectedAaSubstitutionDirection.txt", header = TRUE, sep = " ")
for (i in 1:nrow(exp)) {exp$AaPairId[i] = paste(sort(unlist(strsplit(exp$ExpectedAminoAcidSubstBias[i],'>'))),collapse = '_') }
View(exp)
exp=exp[c(3,4)]
exp$ExpectedAminoAcidSubstBias = gsub('>','_',ExpectedAminoAcidSubstBias)
exp = read.table("../../Body/2Derived/ExpectedAaSubstitutionDirection.txt", header = TRUE, sep = " ")
for (i in 1:nrow(exp)) {exp$AaPairId[i] = paste(sort(unlist(strsplit(exp$ExpectedAminoAcidSubstBias[i],'>'))),collapse = '_') }
exp=exp[c(3,4)]
View(exp)
exp$ExpectedAminoAcidSubstBias = gsub('>','_',exp$ExpectedAminoAcidSubstBias)
View(exp)
exp = read.table("../../Body/2Derived/ExpectedAaSubstitutionDirection.txt", header = TRUE, sep = " ")
View(exp)
View(exp)
exp = read.table("../../Body/2Derived/ExpectedAaSubstitutionDirection.txt", header = TRUE, sep = " ")
exp$ExpectedAminoAcidSubstBias = gsub('>','_',exp$ExpectedAminoAcidSubstBias)
exp$ContrExpectedAminoAcidSubstBias = strsplit(exp$ExpectedAminoAcidSubstBias,"_")
exp$ContrExpectedAminoAcidSubstBias
strsplit(exp$ExpectedAminoAcidSubstBias,"_")[2]
strsplit(exp$ExpectedAminoAcidSubstBias,"_")[,2]
strsplit(exp$ExpectedAminoAcidSubstBias,"_")[2,]
strsplit(exp$ExpectedAminoAcidSubstBias,"_")
exp = read.table("../../Body/2Derived/ExpectedAaSubstitutionDirection.txt", header = TRUE, sep = " ")
exp$ExpectedAminoAcidSubstBias = gsub('>','_',exp$ExpectedAminoAcidSubstBias)
exp$ContrExpectedAminoAcidSubstBias = strsplit(exp$ExpectedAminoAcidSubstBias,"_")
View(exp)
exp$ContrExpectedAminoAcidSubstBias = unlist(strsplit(exp$ExpectedAminoAcidSubstBias,"_"))
i = 1
unlist(strsplit(exp$ExpectedAminoAcidSubstBias[i],"_"))
unlist(strsplit(exp$ExpectedAminoAcidSubstBias[i],"_"))[2]
paste(unlist(strsplit(exp$ExpectedAminoAcidSubstBias[i],"_"))[2],unlist(strsplit(exp$ExpectedAminoAcidSubstBias[i],"_"))[1],sep = '_')
exp$ContrExpectedAminoAcidSubstBias[i]
exp = read.table("../../Body/2Derived/ExpectedAaSubstitutionDirection.txt", header = TRUE, sep = " ")
exp$ExpectedAminoAcidSubstBias = gsub('>','_',exp$ExpectedAminoAcidSubstBias)
exp$ContrExpectedAminoAcidSubstBias[i] = paste(unlist(strsplit(exp$ExpectedAminoAcidSubstBias[i],"_"))[2],unlist(strsplit(exp$ExpectedAminoAcidSubstBias[i],"_"))[1],sep = '_')
exp = read.table("../../Body/2Derived/ExpectedAaSubstitutionDirection.txt", header = TRUE, sep = " ")
exp$ExpectedAminoAcidSubstBias = gsub('>','_',exp$ExpectedAminoAcidSubstBias)
for (i in 1:nrow(exp))
{ # i = 1
exp$ContrExpectedAminoAcidSubstBias[i] = paste(unlist(strsplit(exp$ExpectedAminoAcidSubstBias[i],"_"))[2],unlist(strsplit(exp$ExpectedAminoAcidSubstBias[i],"_"))[1],sep = '_')
}
View(exp)
data1[data1$Var1 == exp$ExpectedAminoAcidSubstBias[i],]$Freq
exp$ExpectedAminoAcidSubstBias[i]
exp$ExpectedAminoAcidSubstBiasNumberRare[i] = data1[data1$Var1 == exp$ExpectedAminoAcidSubstBias[i],]$Freq
exp$ExpectedAminoAcidSubstBiasNumberCommon[i] = data2[data2$Var1 == exp$ExpectedAminoAcidSubstBias[i],]$Freq
exp$ExpectedAminoAcidSubstBiasNumberCommon[i]
data2 = data.frame(table(temp2$AaSubst));
View(data2)
exp$ExpectedAminoAcidSubstBiasNumberRare[i] = data1[data1$Var1 == exp$ExpectedAminoAcidSubstBias[i],]$Freq
exp$ExpectedAminoAcidSubstBiasNumberCommon[i] = data2[data2$Var1 == exp$ExpectedAminoAcidSubstBias[i],]$Freq
exp$ContrExpectedAminoAcidSubstBiasNumberRare[i] = data1[data1$Var1 == exp$ContrExpectedAminoAcidSubstBias[i],]$Freq
exp$ContrExpectedAminoAcidSubstBiasNumberCommon[i] = data2[data2$Var1 == exp$ContrExpectedAminoAcidSubstBias[i],]$Freq
for (i in 1:nrow(exp))
{ # i = 1
exp$ExpectedAminoAcidSubstBiasNumberRare[i] = data1[data1$Var1 == exp$ExpectedAminoAcidSubstBias[i],]$Freq
exp$ExpectedAminoAcidSubstBiasNumberCommon[i] = data2[data2$Var1 == exp$ExpectedAminoAcidSubstBias[i],]$Freq
exp$ContrExpectedAminoAcidSubstBiasNumberRare[i] = data1[data1$Var1 == exp$ContrExpectedAminoAcidSubstBias[i],]$Freq
exp$ContrExpectedAminoAcidSubstBiasNumberCommon[i] = data2[data2$Var1 == exp$ContrExpectedAminoAcidSubstBias[i],]$Freq
}
View(exp)
rm(list=ls(all=TRUE))
#indata <- read.csv("/home/alima/arrr/fulltreeCodons.csv", header = TRUE, sep = ";") #читаю файл
data = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
#### FILTER OUT:
data <- subset(data, synonymous == "non-synonymous" & derived_aa != "Ambiguous" & derived_aa != "Asn/Asp" & derived_aa != "Gln/Glu" & derived_aa != "Leu/Ile" & gene_info != "mRNA_ND6")  #убираю лишнее
table(data$derived_aa)
data$AaSubst = paste(data$ancestral_aa,data$derived_aa, sep = '_')
## frequencies of changes in a given position versus AaSymmetry
#temp = data[(data$ancestral_aa == 'Leu' & data$derived_aa == 'Pro' ) | (data$ancestral_aa == 'Pro' & data$derived_aa == 'Leu') ,]
#temp$AaSubst = paste(temp$ancestral_aa,temp$derived_aa, sep = '_'); nrow(temp)
EvolConstOfPositions = data.frame(table(data$position));
names(EvolConstOfPositions)=c('position','HowManySubstitutions')
EvolConstOfPositions = EvolConstOfPositions[order(-EvolConstOfPositions$HowManySubstitutions),]
EvolConstOfPositionsVec1 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.95),]$position
EvolConstOfPositionsVec2 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions > quantile(EvolConstOfPositions$HowManySubstitutions,0.95),]$position
length(EvolConstOfPositionsVec1)
length(EvolConstOfPositionsVec2)
temp1 = data[data$position %in% EvolConstOfPositionsVec1,]; nrow(temp1) # 158
temp2 = data[data$position %in% EvolConstOfPositionsVec2,]; nrow(temp2) # 2781
table(temp1$AaSubst) # 87 / 71; 1.09
table(temp2$AaSubst) # 866 / 770; 1.12
data1 = data.frame(table(temp1$AaSubst));
data2 = data.frame(table(temp2$AaSubst));
#### load expectations:
exp = read.table("../../Body/2Derived/ExpectedAaSubstitutionDirection.txt", header = TRUE, sep = " ")
exp$ExpectedAminoAcidSubstBias = gsub('>','_',exp$ExpectedAminoAcidSubstBias)
for (i in 1:nrow(exp))
{ # i = 1
exp$ContrExpectedAminoAcidSubstBias[i] = paste(unlist(strsplit(exp$ExpectedAminoAcidSubstBias[i],"_"))[2],unlist(strsplit(exp$ExpectedAminoAcidSubstBias[i],"_"))[1],sep = '_')
}
View(exp)
View(exp)
for (i in 1:nrow(exp))
{ # i = 1
exp$ExpectedAminoAcidSubstBiasNumberRare[i] = data1[data1$Var1 == exp$ExpectedAminoAcidSubstBias[i],]$Freq
exp$ExpectedAminoAcidSubstBiasNumberCommon[i] = data2[data2$Var1 == exp$ExpectedAminoAcidSubstBias[i],]$Freq
exp$ContrExpectedAminoAcidSubstBiasNumberRare[i] = data1[data1$Var1 == exp$ContrExpectedAminoAcidSubstBias[i],]$Freq
exp$ContrExpectedAminoAcidSubstBiasNumberCommon[i] = data2[data2$Var1 == exp$ContrExpectedAminoAcidSubstBias[i],]$Freq
}
i
data1[data1$Var1 == exp$ExpectedAminoAcidSubstBias[i],]$Freq
data2[data2$Var1 == exp$ExpectedAminoAcidSubstBias[i],]$Freq
data1[data1$Var1 == exp$ContrExpectedAminoAcidSubstBias[i],]$Freq
data2[data2$Var1 == exp$ContrExpectedAminoAcidSubstBias[i],]$Freq
View(data2)
View(data1)
data2[data2$Var1 == exp$ContrExpectedAminoAcidSubstBias[i],]$Freq
exp$ExpectedAminoAcidSubstBiasNumberRare = 0
exp$ExpectedAminoAcidSubstBiasNumberCommon = 0
exp$ContrExpectedAminoAcidSubstBiasNumberRare = 0
exp$ContrExpectedAminoAcidSubstBiasNumberCommon = 0
for (i in 1:nrow(exp))
{ # i = 1
exp$ExpectedAminoAcidSubstBiasNumberRare[i] = data1[data1$Var1 == exp$ExpectedAminoAcidSubstBias[i],]$Freq
exp$ExpectedAminoAcidSubstBiasNumberCommon[i] = data2[data2$Var1 == exp$ExpectedAminoAcidSubstBias[i],]$Freq
exp$ContrExpectedAminoAcidSubstBiasNumberRare[i] = data1[data1$Var1 == exp$ContrExpectedAminoAcidSubstBias[i],]$Freq
exp$ContrExpectedAminoAcidSubstBiasNumberCommon[i] = data2[data2$Var1 == exp$ContrExpectedAminoAcidSubstBias[i],]$Freq
}
if (nrow(data1[data1$Var1 == exp$ExpectedAminoAcidSubstBias[i],])>0) {exp$ExpectedAminoAcidSubstBiasNumberRare[i] = data1[data1$Var1 == exp$ExpectedAminoAcidSubstBias[i],]$Freq}
for (i in 1:nrow(exp))
{ # i = 1
if (nrow(data1[data1$Var1 == exp$ExpectedAminoAcidSubstBias[i],])>0) {exp$ExpectedAminoAcidSubstBiasNumberRare[i] = data1[data1$Var1 == exp$ExpectedAminoAcidSubstBias[i],]$Freq}
if (nrow(data2[data2$Var1 == exp$ExpectedAminoAcidSubstBias[i],])>0) {exp$ExpectedAminoAcidSubstBiasNumberCommon[i] = data2[data2$Var1 == exp$ExpectedAminoAcidSubstBias[i],]$Freq}
if (nrow(data1[data1$Var1 == exp$ContrExpectedAminoAcidSubstBias[i],])>0) {exp$ContrExpectedAminoAcidSubstBiasNumberRare[i] = data1[data1$Var1 == exp$ContrExpectedAminoAcidSubstBias[i],]$Freq}
if (nrow(data2[data2$Var1 == exp$ContrExpectedAminoAcidSubstBias[i],])>0) {exp$ContrExpectedAminoAcidSubstBiasNumberCommon[i] = data2[data2$Var1 == exp$ContrExpectedAminoAcidSubstBias[i],]$Freq}
}
View(exp)
exp$ExpectedAminoAcidSubstBiasNumberRare[i],exp$EContrxpectedAminoAcidSubstBiasNumberRare[i]
X = rbind(c(exp$ExpectedAminoAcidSubstBiasNumberRare[i],exp$EContrxpectedAminoAcidSubstBiasNumberRare[i]),c(exp$ExpectedAminoAcidSubstBiasNumberCommon[i],exp$EContrxpectedAminoAcidSubstBiasNumberCommon[i]))
X
c(exp$ExpectedAminoAcidSubstBiasNumberRare[i],exp$EContrxpectedAminoAcidSubstBiasNumberRare[i])
X = rbind(c(exp$ExpectedAminoAcidSubstBiasNumberRare[i],exp$ContrExpectedAminoAcidSubstBiasNumberRare[i]),c(exp$ExpectedAminoAcidSubstBiasNumberCommon[i],exp$ContrExpectedAminoAcidSubstBiasNumberCommon[i]))
X
fisher.test(X, alternative = 'less')
summary(fisher.test(X, alternative = 'less'))
FT = fisher.test(X, alternative = 'less')
summary(FT)
FT
FT$estimate
exp$Odds[i] = FT$estimate
exp$Odds[i]
exp$Odds = 0
for (i in 1:nrow(exp))
{ # i = 1
X = rbind(c(exp$ExpectedAminoAcidSubstBiasNumberRare[i],exp$ContrExpectedAminoAcidSubstBiasNumberRare[i]),c(exp$ExpectedAminoAcidSubstBiasNumberCommon[i],exp$ContrExpectedAminoAcidSubstBiasNumberCommon[i]))
FT = fisher.test(X, alternative = 'less')
exp$Odds[i] = FT$estimate
}
View(exp)
X = rbind(c(sum(exp$ExpectedAminoAcidSubstBiasNumberRare),sum(exp$ContrExpectedAminoAcidSubstBiasNumberRare)),c(sum(exp$ExpectedAminoAcidSubstBiasNumberCommon),sum(exp$ContrExpectedAminoAcidSubstBiasNumberCommon))
)
X = rbind(c(sum(exp$ExpectedAminoAcidSubstBiasNumberRare),sum(exp$ContrExpectedAminoAcidSubstBiasNumberRare)),c(sum(exp$ExpectedAminoAcidSubstBiasNumberCommon),sum(exp$ContrExpectedAminoAcidSubstBiasNumberCommon)))
X
FT = fisher.test(X, alternative = 'less')
FT

DummyZeroes = merge(AllAa1,AllAa2)
DummyZeroes$FromAncestralToDerived=paste(DummyZeroes$AA1,DummyZeroes$AA2,sep='>')
DummyZeroes$NumberOfEvents = 0
DummyZeroes = DummyZeroes[c(3,4)]
##### rbind and aggregate FromTo and DummyZeroes
FromTo1 = rbind(FromTo,DummyZeroes)
FromTo2 = aggregate(FromTo1$NumberOfEvents, by = list(FromTo1$FromAncestralToDerived), FUN = sum)
View(FromTo2)
rm(list=ls(all=TRUE))
#indata <- read.csv("/home/alima/arrr/fulltreeCodons.csv", header = TRUE, sep = ";") #читаю файл
data = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
#### FILTER OUT:
data <- subset(data, synonymous == "non-synonymous" & derived_aa != "Ambiguous" & derived_aa != "Asn/Asp" & derived_aa != "Gln/Glu" & derived_aa != "Leu/Ile" & gene_info != "mRNA_ND6")  #убираю лишнее
table(data$derived_aa)
## ADD FILTER OF BACKGROUND (THE SAME NEIGHBOR NUCLEOTIDES)
##### DERIVE SUBSTITUTION MATRIX FromTo
data$FromTo = paste(data$ancestral_aa,data$derived_aa,sep = '>')
FromTo = data.frame(table(data$FromTo))
names(FromTo) = c('FromAncestralToDerived', 'NumberOfEvents')
nrow(FromTo) # 236, but totally there are 21*21 possibilities
FromTo$FromAncestralToDerived = as.character(FromTo$FromAncestralToDerived)
##### ADD DUMMY MATRIX WITH ZEROES
AllAa1 = data.frame(unique(data$ancestral_aa)); nrow(AllAa1); names(AllAa1) = c('AA1')
AllAa2 = data.frame(unique(data$ancestral_aa)); nrow(AllAa2); names(AllAa2) = c('AA2')
DummyZeroes = merge(AllAa1,AllAa2)
DummyZeroes$FromAncestralToDerived=paste(DummyZeroes$AA1,DummyZeroes$AA2,sep='>')
DummyZeroes$NumberOfEvents = 0
DummyZeroes = DummyZeroes[c(3,4)]
##### rbind and aggregate FromTo and DummyZeroes
FromTo1 = rbind(FromTo,DummyZeroes)
FromTo2 = aggregate(FromTo1$NumberOfEvents, by = list(FromTo1$FromAncestralToDerived), FUN = sum)
View(FromTo2)
names(FromTo2)=c('FromAncestralToDerived','NumberOfEvents')
for (i in 1:nrow(FromTo)) {FromTo$AaPairId[i] = paste(sort(unlist(strsplit(FromTo$FromAncestralToDerived[i],'>'))),collapse = '.') }
for (i in 1:nrow(FromTo2)) {FromTo2$AaPairId[i] = paste(sort(unlist(strsplit(FromTo2$FromAncestralToDerived[i],'>'))),collapse = '.') }
View(FromTo2)
rm(list=ls(all=TRUE))
#indata <- read.csv("/home/alima/arrr/fulltreeCodons.csv", header = TRUE, sep = ";") #читаю файл
data = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
#### FILTER OUT:
data <- subset(data, synonymous == "non-synonymous" & derived_aa != "Ambiguous" & derived_aa != "Asn/Asp" & derived_aa != "Gln/Glu" & derived_aa != "Leu/Ile" & gene_info != "mRNA_ND6")  #убираю лишнее
table(data$derived_aa)
## ADD FILTER OF BACKGROUND (THE SAME NEIGHBOR NUCLEOTIDES)
##### DERIVE SUBSTITUTION MATRIX FromTo
data$FromTo = paste(data$ancestral_aa,data$derived_aa,sep = '>')
FromTo = data.frame(table(data$FromTo))
names(FromTo) = c('FromAncestralToDerived', 'NumberOfEvents')
nrow(FromTo) # 236, but totally there are 21*21 possibilities
FromTo$FromAncestralToDerived = as.character(FromTo$FromAncestralToDerived)
##### ADD DUMMY MATRIX WITH ZEROES
AllAa1 = data.frame(unique(data$ancestral_aa)); nrow(AllAa1); names(AllAa1) = c('AA1')
AllAa2 = data.frame(unique(data$ancestral_aa)); nrow(AllAa2); names(AllAa2) = c('AA2')
DummyZeroes = merge(AllAa1,AllAa2)
DummyZeroes$FromAncestralToDerived=paste(DummyZeroes$AA1,DummyZeroes$AA2,sep='>')
DummyZeroes$NumberOfEvents = 0
DummyZeroes = DummyZeroes[c(3,4)]
##### rbind and aggregate FromTo and DummyZeroes
FromTo1 = rbind(FromTo,DummyZeroes)
FromTo2 = aggregate(FromTo1$NumberOfEvents, by = list(FromTo1$FromAncestralToDerived), FUN = sum)
names(FromTo2)=c('FromAncestralToDerived','NumberOfEvents')
##### DERIVE UNIQUE IDENTIFIER FOR EACH PAIR OF AMINOACIDS:
for (i in 1:nrow(FromTo2)) {FromTo2$AaPairId[i] = paste(sort(unlist(strsplit(FromTo2$FromAncestralToDerived[i],'>'))),collapse = '>') }
View(FromTo2)
A = FromTo2[FromTo2$FromAncestralToDerived == FromTo2$AaPairId,]
B = FromTo2[FromTo2$FromAncestralToDerived != FromTo2$AaPairId,]
View(A)
rm(list=ls(all=TRUE))
#indata <- read.csv("/home/alima/arrr/fulltreeCodons.csv", header = TRUE, sep = ";") #читаю файл
data = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
#### FILTER OUT:
data <- subset(data, synonymous == "non-synonymous" & derived_aa != "Ambiguous" & derived_aa != "Asn/Asp" & derived_aa != "Gln/Glu" & derived_aa != "Leu/Ile" & gene_info != "mRNA_ND6")  #убираю лишнее
table(data$derived_aa)
## ADD FILTER OF BACKGROUND (THE SAME NEIGHBOR NUCLEOTIDES)
##### DERIVE SUBSTITUTION MATRIX FromTo
data$FromTo = paste(data$ancestral_aa,data$derived_aa,sep = '>')
FromTo = data.frame(table(data$FromTo))
names(FromTo) = c('FromAncestralToDerived', 'NumberOfEvents')
nrow(FromTo) # 236, but totally there are 21*21 possibilities
FromTo$FromAncestralToDerived = as.character(FromTo$FromAncestralToDerived)
##### ADD DUMMY MATRIX WITH ZEROES
AllAa1 = data.frame(unique(data$ancestral_aa)); nrow(AllAa1); names(AllAa1) = c('AA1')
AllAa2 = data.frame(unique(data$ancestral_aa)); nrow(AllAa2); names(AllAa2) = c('AA2')
DummyZeroes = merge(AllAa1,AllAa2)
DummyZeroes$FromAncestralToDerived=paste(DummyZeroes$AA1,DummyZeroes$AA2,sep='>')
DummyZeroes$NumberOfEvents = 0
DummyZeroes = DummyZeroes[c(3,4)]
##### rbind and aggregate FromTo and DummyZeroes
FromTo1 = rbind(FromTo,DummyZeroes)
FromTo2 = aggregate(FromTo1$NumberOfEvents, by = list(FromTo1$FromAncestralToDerived), FUN = sum)
names(FromTo2)=c('FromAncestralToDerived','NumberOfEvents')
FromTo2$From = gsub(">.*",'',FromTo2$FromAncestralToDerived)
FromTo2$To = gsub(".*>",'',FromTo2$FromAncestralToDerived)
FromTo2 = FromTo2[FromTo2$From != FromTo2$To,]
nrow(FromTo2)
for (i in 1:nrow(FromTo2)) {FromTo2$AaPairId[i] = paste(sort(unlist(strsplit(FromTo2$FromAncestralToDerived[i],'>'))),collapse = '>') }
A = FromTo2[FromTo2$FromAncestralToDerived == FromTo2$AaPairId,]
B = FromTo2[FromTo2$FromAncestralToDerived != FromTo2$AaPairId,]
View(A)
View(B)
rm(list=ls(all=TRUE))
#indata <- read.csv("/home/alima/arrr/fulltreeCodons.csv", header = TRUE, sep = ";") #читаю файл
data = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
#### FILTER OUT:
data <- subset(data, synonymous == "non-synonymous" & derived_aa != "Ambiguous" & derived_aa != "Asn/Asp" & derived_aa != "Gln/Glu" & derived_aa != "Leu/Ile" & gene_info != "mRNA_ND6")  #убираю лишнее
table(data$derived_aa)
## ADD FILTER OF BACKGROUND (THE SAME NEIGHBOR NUCLEOTIDES)
##### DERIVE SUBSTITUTION MATRIX FromTo
data$FromTo = paste(data$ancestral_aa,data$derived_aa,sep = '>')
FromTo = data.frame(table(data$FromTo))
names(FromTo) = c('FromAncestralToDerived', 'NumberOfEvents')
nrow(FromTo) # 236, but totally there are 21*21 possibilities
FromTo$FromAncestralToDerived = as.character(FromTo$FromAncestralToDerived)
##### ADD DUMMY MATRIX WITH ZEROES
AllAa1 = data.frame(unique(data$ancestral_aa)); nrow(AllAa1); names(AllAa1) = c('AA1')
AllAa2 = data.frame(unique(data$ancestral_aa)); nrow(AllAa2); names(AllAa2) = c('AA2')
DummyZeroes = merge(AllAa1,AllAa2)
DummyZeroes$FromAncestralToDerived=paste(DummyZeroes$AA1,DummyZeroes$AA2,sep='>')
DummyZeroes$NumberOfEvents = 0
DummyZeroes = DummyZeroes[c(3,4)]
##### rbind and aggregate FromTo and DummyZeroes
FromTo1 = rbind(FromTo,DummyZeroes)
FromTo2 = aggregate(FromTo1$NumberOfEvents, by = list(FromTo1$FromAncestralToDerived), FUN = sum)
names(FromTo2)=c('FromAncestralToDerived','NumberOfEvents')
FromTo2$From = gsub(">.*",'',FromTo2$FromAncestralToDerived)
FromTo2$To = gsub(".*>",'',FromTo2$FromAncestralToDerived)
FromTo2 = FromTo2[FromTo2$From != FromTo2$To,]; nrow(FromTo2)
##### DERIVE UNIQUE IDENTIFIER FOR EACH PAIR OF AMINOACIDS:
for (i in 1:nrow(FromTo2)) {FromTo2$AaPairId[i] = paste(sort(unlist(strsplit(FromTo2$FromAncestralToDerived[i],'>'))),collapse = '>') }
A = FromTo2[FromTo2$FromAncestralToDerived == FromTo2$AaPairId,]
B = FromTo2[FromTo2$FromAncestralToDerived != FromTo2$AaPairId,]
View(A)
A= A[c(1,2,5),];
View(A)
A = FromTo2[FromTo2$FromAncestralToDerived == FromTo2$AaPairId,]; A= A[c(1,2,5)];
View(A)
A = FromTo2[FromTo2$FromAncestralToDerived == FromTo2$AaPairId,]; A= A[c(1,2,5)]; names(A)=c('FromAncestralToDerived1','NumberOfEvents1','AaPairId')
B = FromTo2[FromTo2$FromAncestralToDerived != FromTo2$AaPairId,]; B= B[c(1,2,5)]; names(B)=c('FromAncestralToDerived2','NumberOfEvents2','AaPairId')
FromTo3 = merge(A,B)
View(FromTo3)
FromTo3$Number1To2 = FromTo3$NumberOfEvents1 / FromTo3$NumberOfEvents2
View(FromTo3)
FromTo3$NumberOfEvents1To2 = FromTo3$NumberOfEvents1 / FromTo3$NumberOfEvents2
exp = read.table("../../Body/2Derived/ExpectedAaSubstitutionDirection.txt", header = TRUE, sep = " ")
View(exp)
rm(list=ls(all=TRUE))
#indata <- read.csv("/home/alima/arrr/fulltreeCodons.csv", header = TRUE, sep = ";") #читаю файл
data = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
#### FILTER OUT:
data <- subset(data, synonymous == "non-synonymous" & derived_aa != "Ambiguous" & derived_aa != "Asn/Asp" & derived_aa != "Gln/Glu" & derived_aa != "Leu/Ile" & gene_info != "mRNA_ND6")  #убираю лишнее
table(data$derived_aa)
## ADD FILTER OF BACKGROUND (THE SAME NEIGHBOR NUCLEOTIDES)
##### DERIVE SUBSTITUTION MATRIX FromTo
data$FromTo = paste(data$ancestral_aa,data$derived_aa,sep = '>')
FromTo = data.frame(table(data$FromTo))
names(FromTo) = c('FromAncestralToDerived', 'NumberOfEvents')
nrow(FromTo) # 236, but totally there are 21*21 possibilities
FromTo$FromAncestralToDerived = as.character(FromTo$FromAncestralToDerived)
##### ADD DUMMY MATRIX WITH ZEROES
AllAa1 = data.frame(unique(data$ancestral_aa)); nrow(AllAa1); names(AllAa1) = c('AA1')
AllAa2 = data.frame(unique(data$ancestral_aa)); nrow(AllAa2); names(AllAa2) = c('AA2')
DummyZeroes = merge(AllAa1,AllAa2)
DummyZeroes$FromAncestralToDerived=paste(DummyZeroes$AA1,DummyZeroes$AA2,sep='>')
DummyZeroes$NumberOfEvents = 0
DummyZeroes = DummyZeroes[c(3,4)]
##### rbind and aggregate FromTo and DummyZeroes
FromTo1 = rbind(FromTo,DummyZeroes)
FromTo2 = aggregate(FromTo1$NumberOfEvents, by = list(FromTo1$FromAncestralToDerived), FUN = sum)
names(FromTo2)=c('FromAncestralToDerived','NumberOfEvents')
FromTo2$From = gsub(">.*",'',FromTo2$FromAncestralToDerived)
FromTo2$To = gsub(".*>",'',FromTo2$FromAncestralToDerived)
FromTo2 = FromTo2[FromTo2$From != FromTo2$To,]; nrow(FromTo2)
##### DERIVE UNIQUE IDENTIFIER FOR EACH PAIR OF AMINOACIDS:
for (i in 1:nrow(FromTo2)) {FromTo2$AaPairId[i] = paste(sort(unlist(strsplit(FromTo2$FromAncestralToDerived[i],'>'))),collapse = '>') }
##### from 420 to 210 rows and NumberOfEvents1To2
A = FromTo2[FromTo2$FromAncestralToDerived == FromTo2$AaPairId,]; A= A[c(1,2,5)]; names(A)=c('FromAncestralToDerived1','NumberOfEvents1','AaPairId')
B = FromTo2[FromTo2$FromAncestralToDerived != FromTo2$AaPairId,]; B= B[c(1,2,5)]; names(B)=c('FromAncestralToDerived2','NumberOfEvents2','AaPairId')
FromTo3 = merge(A,B)
FromTo3$NumberOfEvents1To2 = FromTo3$NumberOfEvents1 / FromTo3$NumberOfEvents2
##### read expectations:
exp = read.table("../../Body/2Derived/ExpectedAaSubstitutionDirection.txt", header = TRUE, sep = " ")
View(exp)
exp=exp[c[3]]
exp=exp[c(3)]
View(exp)
exp = read.table("../../Body/2Derived/ExpectedAaSubstitutionDirection.txt", header = TRUE, sep = " ")
for (i in 1:nrow(exp)) {exp$AaPairId[i] = paste(sort(unlist(strsplit(exp$ExpectedAminoAcidSubstBias[i],'>'))),collapse = '>') }
View(exp)
exp=exp[c(3,4)]
FromTo4 = merge(FromTo3,exp, by = 'AaPairId')
FromTo4 = merge(FromTo3,exp, by = 'AaPairId', all.x = TRUE)
View(FromTo4)
i = 17
(!is.na(FromTo4$ExpectedAminoAcidSubstBias[i])
)
(!is.na(FromTo4$ExpectedAminoAcidSubstBias[i]) & FromTo4$ExpectedAminoAcidSubstBias[i] == FromTo4$FromAncestralToDerived1)
(!is.na(FromTo4$ExpectedAminoAcidSubstBias[i]) & FromTo4$ExpectedAminoAcidSubstBias[i] == FromTo4$FromAncestralToDerived1[i])
if (!is.na(FromTo4$ExpectedAminoAcidSubstBias[i]) & FromTo4$ExpectedAminoAcidSubstBias[i] == FromTo4$FromAncestralToDerived1[i]) {FromTo4$ExpectedMoreThanOne[i] = FromTo4$NumberOfEvents1[i] / FromTo4$NumberOfEvents2[i]}
for (i in 1:nrow(FromTo4))
{ # i = 17
if (!is.na(FromTo4$ExpectedAminoAcidSubstBias[i]) & FromTo4$ExpectedAminoAcidSubstBias[i] == FromTo4$FromAncestralToDerived1[i]) {FromTo4$ExpectedMoreThanOne[i] = FromTo4$NumberOfEvents1[i] / FromTo4$NumberOfEvents2[i]}
if (!is.na(FromTo4$ExpectedAminoAcidSubstBias[i]) & FromTo4$ExpectedAminoAcidSubstBias[i] == FromTo4$FromAncestralToDerived2[i]) {FromTo4$ExpectedMoreThanOne[i] = FromTo4$NumberOfEvents2[i] / FromTo4$NumberOfEvents1[i]}
}
for (i in 1:nrow(FromTo4))
{ # i = 17
if (!is.na(FromTo4$ExpectedAminoAcidSubstBias[i]) & FromTo4$ExpectedAminoAcidSubstBias[i] == FromTo4$FromAncestralToDerived1[i]) {FromTo4$ExpectedMoreThanOne[i] = FromTo4$NumberOfEvents1[i] / FromTo4$NumberOfEvents2[i]}
if (!is.na(FromTo4$ExpectedAminoAcidSubstBias[i]) & FromTo4$ExpectedAminoAcidSubstBias[i] == FromTo4$FromAncestralToDerived2[i]) {FromTo4$ExpectedMoreThanOne[i] = FromTo4$NumberOfEvents2[i] / FromTo4$NumberOfEvents1[i]}
}
FromTo4$ExpectedMoreThanOne=''
for (i in 1:nrow(FromTo4))
{ # i = 17
if (!is.na(FromTo4$ExpectedAminoAcidSubstBias[i]) & FromTo4$ExpectedAminoAcidSubstBias[i] == FromTo4$FromAncestralToDerived1[i]) {FromTo4$ExpectedMoreThanOne[i] = FromTo4$NumberOfEvents1[i] / FromTo4$NumberOfEvents2[i]}
if (!is.na(FromTo4$ExpectedAminoAcidSubstBias[i]) & FromTo4$ExpectedAminoAcidSubstBias[i] == FromTo4$FromAncestralToDerived2[i]) {FromTo4$ExpectedMoreThanOne[i] = FromTo4$NumberOfEvents2[i] / FromTo4$NumberOfEvents1[i]}
}
View(FromTo4)
FromTo4$ExpectedMoreThanOne=NA
for (i in 1:nrow(FromTo4))
{ # i = 17
if (!is.na(FromTo4$ExpectedAminoAcidSubstBias[i]) & FromTo4$ExpectedAminoAcidSubstBias[i] == FromTo4$FromAncestralToDerived1[i]) {FromTo4$ExpectedMoreThanOne[i] = FromTo4$NumberOfEvents1[i] / FromTo4$NumberOfEvents2[i]}
if (!is.na(FromTo4$ExpectedAminoAcidSubstBias[i]) & FromTo4$ExpectedAminoAcidSubstBias[i] == FromTo4$FromAncestralToDerived2[i]) {FromTo4$ExpectedMoreThanOne[i] = FromTo4$NumberOfEvents2[i] / FromTo4$NumberOfEvents1[i]}
}
summary(FromTo4$ExpectedMoreThanOne)
hist(FromTo4$ExpectedMoreThanOne)
hist(FromTo4$ExpectedMoreThanOne,breaks = 100)
wilcox.test(FromTo4$ExpectedMoreThanOne, mu = 1)
View(FromTo4)
FromTo4 = FromTo4[sort(FromTo4$ExpectedMoreThanOne),]
rm(list=ls(all=TRUE))
#indata <- read.csv("/home/alima/arrr/fulltreeCodons.csv", header = TRUE, sep = ";") #читаю файл
data = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
#### FILTER OUT:
data <- subset(data, synonymous == "non-synonymous" & derived_aa != "Ambiguous" & derived_aa != "Asn/Asp" & derived_aa != "Gln/Glu" & derived_aa != "Leu/Ile" & gene_info != "mRNA_ND6")  #убираю лишнее
table(data$derived_aa)
## ADD FILTER OF BACKGROUND (THE SAME NEIGHBOR NUCLEOTIDES)
##### DERIVE SUBSTITUTION MATRIX FromTo
data$FromTo = paste(data$ancestral_aa,data$derived_aa,sep = '>')
FromTo = data.frame(table(data$FromTo))
names(FromTo) = c('FromAncestralToDerived', 'NumberOfEvents')
nrow(FromTo) # 236, but totally there are 21*21 possibilities
FromTo$FromAncestralToDerived = as.character(FromTo$FromAncestralToDerived)
##### ADD DUMMY MATRIX WITH ZEROES
AllAa1 = data.frame(unique(data$ancestral_aa)); nrow(AllAa1); names(AllAa1) = c('AA1')
AllAa2 = data.frame(unique(data$ancestral_aa)); nrow(AllAa2); names(AllAa2) = c('AA2')
DummyZeroes = merge(AllAa1,AllAa2)
DummyZeroes$FromAncestralToDerived=paste(DummyZeroes$AA1,DummyZeroes$AA2,sep='>')
DummyZeroes$NumberOfEvents = 0
DummyZeroes = DummyZeroes[c(3,4)]
##### rbind and aggregate FromTo and DummyZeroes
FromTo1 = rbind(FromTo,DummyZeroes)
FromTo2 = aggregate(FromTo1$NumberOfEvents, by = list(FromTo1$FromAncestralToDerived), FUN = sum)
names(FromTo2)=c('FromAncestralToDerived','NumberOfEvents')
FromTo2$From = gsub(">.*",'',FromTo2$FromAncestralToDerived)
FromTo2$To = gsub(".*>",'',FromTo2$FromAncestralToDerived)
FromTo2 = FromTo2[FromTo2$From != FromTo2$To,]; nrow(FromTo2)
##### DERIVE UNIQUE IDENTIFIER FOR EACH PAIR OF AMINOACIDS:
for (i in 1:nrow(FromTo2)) {FromTo2$AaPairId[i] = paste(sort(unlist(strsplit(FromTo2$FromAncestralToDerived[i],'>'))),collapse = '>') }
##### from 420 to 210 rows and NumberOfEvents1To2
A = FromTo2[FromTo2$FromAncestralToDerived == FromTo2$AaPairId,]; A= A[c(1,2,5)]; names(A)=c('FromAncestralToDerived1','NumberOfEvents1','AaPairId')
B = FromTo2[FromTo2$FromAncestralToDerived != FromTo2$AaPairId,]; B= B[c(1,2,5)]; names(B)=c('FromAncestralToDerived2','NumberOfEvents2','AaPairId')
FromTo3 = merge(A,B)
FromTo3$NumberOfEvents1To2 = FromTo3$NumberOfEvents1 / FromTo3$NumberOfEvents2
##### read expectations:
exp = read.table("../../Body/2Derived/ExpectedAaSubstitutionDirection.txt", header = TRUE, sep = " ")
for (i in 1:nrow(exp)) {exp$AaPairId[i] = paste(sort(unlist(strsplit(exp$ExpectedAminoAcidSubstBias[i],'>'))),collapse = '>') }
exp=exp[c(3,4)]
FromTo4 = merge(FromTo3,exp, by = 'AaPairId', all.x = TRUE)
#####
FromTo4$ExpectedMoreThanOne=NA
for (i in 1:nrow(FromTo4))
{ # i = 17
if (!is.na(FromTo4$ExpectedAminoAcidSubstBias[i]) & FromTo4$ExpectedAminoAcidSubstBias[i] == FromTo4$FromAncestralToDerived1[i]) {FromTo4$ExpectedMoreThanOne[i] = FromTo4$NumberOfEvents1[i] / FromTo4$NumberOfEvents2[i]}
if (!is.na(FromTo4$ExpectedAminoAcidSubstBias[i]) & FromTo4$ExpectedAminoAcidSubstBias[i] == FromTo4$FromAncestralToDerived2[i]) {FromTo4$ExpectedMoreThanOne[i] = FromTo4$NumberOfEvents2[i] / FromTo4$NumberOfEvents1[i]}
}
FromTo4 = FromTo4[order(FromTo4$ExpectedMoreThanOne)]
FromTo4 = FromTo4[order(FromTo4$ExpectedMoreThanOne),]
View(FromTo4)
rm(list=ls(all=TRUE))
#indata <- read.csv("/home/alima/arrr/fulltreeCodons.csv", header = TRUE, sep = ";") #читаю файл
data = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
data <- subset(data, synonymous == "non-synonymous" & derived_aa != "Ambiguous" & derived_aa != "Asn/Asp" & derived_aa != "Gln/Glu" & derived_aa != "Leu/Ile" & gene_info != "mRNA_ND6")  #убираю лишнее
table(data$derived_aa)
data$FromTo = paste(data$ancestral_aa,data$derived_aa,sep = '>')
FromTo = data.frame(table(data$FromTo))
names(FromTo) = c('FromAncestralToDerived', 'NumberOfEvents')
nrow(FromTo) # 236, but totally there are 21*21 possibilities
FromTo$FromAncestralToDerived = as.character(FromTo$FromAncestralToDerived)
View(FromTo)
##### ADD DUMMY MATRIX WITH ZEROES
AllAa1 = data.frame(unique(data$ancestral_aa)); nrow(AllAa1); names(AllAa1) = c('AA1')
AllAa2 = data.frame(unique(data$ancestral_aa)); nrow(AllAa2); names(AllAa2) = c('AA2')
DummyZeroes = merge(AllAa1,AllAa2)
DummyZeroes$FromAncestralToDerived=paste(DummyZeroes$AA1,DummyZeroes$AA2,sep='>')
DummyZeroes$NumberOfEvents = 0
DummyZeroes = DummyZeroes[c(3,4)]
View(DummyZeroes)
21*21
View(FromTo)
FromTo1 = rbind(FromTo,DummyZeroes)
FromTo2 = aggregate(FromTo1$NumberOfEvents, by = list(FromTo1$FromAncestralToDerived), FUN = sum)
View(FromTo2)
names(FromTo2)=c('FromAncestralToDerived','NumberOfEvents')
FromTo2$From = gsub(">.*",'',FromTo2$FromAncestralToDerived)
FromTo2$To = gsub(".*>",'',FromTo2$FromAncestralToDerived)
FromTo2 = FromTo2[FromTo2$From != FromTo2$To,]; nrow(FromTo2)
View(FromTo2)
##### DERIVE UNIQUE IDENTIFIER FOR EACH PAIR OF AMINOACIDS:
for (i in 1:nrow(FromTo2)) {FromTo2$AaPairId[i] = paste(sort(unlist(strsplit(FromTo2$FromAncestralToDerived[i],'>'))),collapse = '>') }
##### from 420 to 210 rows and NumberOfEvents1To2
A = FromTo2[FromTo2$FromAncestralToDerived == FromTo2$AaPairId,]; A= A[c(1,2,5)]; names(A)=c('FromAncestralToDerived1','NumberOfEvents1','AaPairId')
B = FromTo2[FromTo2$FromAncestralToDerived != FromTo2$AaPairId,]; B= B[c(1,2,5)]; names(B)=c('FromAncestralToDerived2','NumberOfEvents2','AaPairId')
FromTo3 = merge(A,B)
FromTo3$NumberOfEvents1To2 = FromTo3$NumberOfEvents1 / FromTo3$NumberOfEvents2
##### read expectations:
exp = read.table("../../Body/2Derived/ExpectedAaSubstitutionDirection.txt", header = TRUE, sep = " ")
for (i in 1:nrow(exp)) {exp$AaPairId[i] = paste(sort(unlist(strsplit(exp$ExpectedAminoAcidSubstBias[i],'>'))),collapse = '>') }
exp=exp[c(3,4)]
FromTo4 = merge(FromTo3,exp, by = 'AaPairId', all.x = TRUE)
#####
FromTo4$ExpectedMoreThanOne=NA
for (i in 1:nrow(FromTo4))
{ # i = 17
if (!is.na(FromTo4$ExpectedAminoAcidSubstBias[i]) & FromTo4$ExpectedAminoAcidSubstBias[i] == FromTo4$FromAncestralToDerived1[i]) {FromTo4$ExpectedMoreThanOne[i] = FromTo4$NumberOfEvents1[i] / FromTo4$NumberOfEvents2[i]}
if (!is.na(FromTo4$ExpectedAminoAcidSubstBias[i]) & FromTo4$ExpectedAminoAcidSubstBias[i] == FromTo4$FromAncestralToDerived2[i]) {FromTo4$ExpectedMoreThanOne[i] = FromTo4$NumberOfEvents2[i] / FromTo4$NumberOfEvents1[i]}
}
FromTo4 = FromTo4[order(FromTo4$ExpectedMoreThanOne),]
summary(FromTo4$ExpectedMoreThanOne)
hist(FromTo4$ExpectedMoreThanOne,breaks = 100)
wilcox.test(FromTo4$ExpectedMoreThanOne, mu = 1)
View(FromTo4)
write.table(FromTo4,"../../Body/3Results/Alima02.AaAsymmetry.ExpectedVsObservedAaChanges.txt")
FromTo4$TotalSubst = FromTo4$NumberOfEvents1 + FromTo4$NumberOfEvents2
rm(list=ls(all=TRUE))
#indata <- read.csv("/home/alima/arrr/fulltreeCodons.csv", header = TRUE, sep = ";") #читаю файл
data = read.csv("../../Body/2Derived/fulltreeCodons.csv", header = TRUE, sep = ";")
head(data)
#### FILTER OUT:
data <- subset(data, synonymous == "non-synonymous" & derived_aa != "Ambiguous" & derived_aa != "Asn/Asp" & derived_aa != "Gln/Glu" & derived_aa != "Leu/Ile" & gene_info != "mRNA_ND6")  #убираю лишнее
table(data$derived_aa)
head(data)
temp = data[data$ancestral_aa == 'Leu' & data$derived_aa == 'Pro' ,]
nrow(temp)
head(temp)
temp = data[(data$ancestral_aa == 'Leu' & data$derived_aa == 'Pro' ) | (data$ancestral_aa == 'Pro' & data$derived_aa == 'Leu') ,]
nrow(temp)
head(temp)
table(temp$position)
Freq = data.frame(table(temp$position))
Freq
names(Freq)=c('position','HowManySubstitutions')
Freq = Freq[order(Freq$HowManySubstitutions),]
Freq
PositionsUnderMutagenesis = Freq[Freq$HowManySubstitutions >= 50,]$position
PositionsUnderMutagenesis
PositionsUnderSelection  = Freq[Freq$HowManySubstitutions < 50,]$position
PositionsUnderSelection
TempUnderMutagenesis = temp[temp$position %in% PositionsUnderMutagenesis,]
nrow(TempUnderMutagenesis)
TempUnderSelection =   temp[temp$position %in% PositionsUnderSelection,];
nrow(TempUnderSelection) # 2338
nrow(TempUnderSelection) # 601
head(TempUnderSelection)
temp$AaSubst = paste(temp$ancestral_aa,temp$derived_aa, sep = '_')
temp$AaSubst
temp = data[(data$ancestral_aa == 'Leu' & data$derived_aa == 'Pro' ) | (data$ancestral_aa == 'Pro' & data$derived_aa == 'Leu') ,]
temp$AaSubst = paste(temp$ancestral_aa,temp$derived_aa, sep = '_')
nrow(temp)
head(temp)
Freq = data.frame(table(temp$position))
names(Freq)=c('position','HowManySubstitutions')
Freq = Freq[order(Freq$HowManySubstitutions),]
PositionsUnderMutagenesis = Freq[Freq$HowManySubstitutions >= 50,]$position
PositionsUnderSelection  = Freq[Freq$HowManySubstitutions < 50,]$position
TempUnderMutagenesis = temp[temp$position %in% PositionsUnderMutagenesis,]; nrow(TempUnderMutagenesis) # 2338
TempUnderSelection =   temp[temp$position %in% PositionsUnderSelection,]; nrow(TempUnderSelection) # 601
head(TempUnderSelection)
table(TempUnderSelection$AaSubst)
table(TempUnderMutagenesis$AaSubst)
1230 / 1108
table(TempUnderSelection$AaSubst)
316 / 285
1230 / 1108 = 1.11
1230 / 1108
temp = data[(data$ancestral_aa == 'Leu' & data$derived_aa == 'Pro' ) | (data$ancestral_aa == 'Pro' & data$derived_aa == 'Leu') ,]
temp$AaSubst = paste(temp$ancestral_aa,temp$derived_aa, sep = '_'); nrow(temp)
Freq = data.frame(table(temp$position))
names(Freq)=c('position','HowManySubstitutions')
Freq = Freq[order(Freq$HowManySubstitutions),]
PositionsUnderMutagenesis = Freq[Freq$HowManySubstitutions >= 100,]$position
PositionsUnderSelection  = Freq[Freq$HowManySubstitutions < 100,]$position
TempUnderMutagenesis = temp[temp$position %in% PositionsUnderMutagenesis,]; nrow(TempUnderMutagenesis) # 2338
TempUnderSelection =   temp[temp$position %in% PositionsUnderSelection,]; nrow(TempUnderSelection) # 601
table(TempUnderSelection$AaSubst)   # 316 / 285  = 1.108
table(TempUnderMutagenesis$AaSubst) #  1230 / 1108 = 1.110
temp = data[(data$ancestral_aa == 'Leu' & data$derived_aa == 'Pro' ) | (data$ancestral_aa == 'Pro' & data$derived_aa == 'Leu') ,]
temp$AaSubst = paste(temp$ancestral_aa,temp$derived_aa, sep = '_'); nrow(temp)
Freq = data.frame(table(temp$position))
names(Freq)=c('position','HowManySubstitutions')
Freq = Freq[order(Freq$HowManySubstitutions),]
PositionsUnderMutagenesis = Freq[Freq$HowManySubstitutions >= 100,]$position
PositionsUnderSelection  = Freq[Freq$HowManySubstitutions < 10,]$position
TempUnderMutagenesis = temp[temp$position %in% PositionsUnderMutagenesis,]; nrow(TempUnderMutagenesis) # 2338
TempUnderSelection =   temp[temp$position %in% PositionsUnderSelection,]; nrow(TempUnderSelection) # 601
table(TempUnderSelection$AaSubst)   # 316 / 285  = 1.108
table(TempUnderMutagenesis$AaSubst) #  1230 / 1108 = 1.110
129/110
table(TempUnderMutagenesis$AaSubst) #  1230 / 1108 = 1.110;
1055 / 933
temp = data[(data$ancestral_aa == 'Leu' & data$derived_aa == 'Pro' ) | (data$ancestral_aa == 'Pro' & data$derived_aa == 'Leu') ,]
temp$AaSubst = paste(temp$ancestral_aa,temp$derived_aa, sep = '_'); nrow(temp)
Freq = data.frame(table(temp$position))
names(Freq)=c('position','HowManySubstitutions')
Freq = Freq[order(Freq$HowManySubstitutions),]
PositionsUnderMutagenesis = Freq[Freq$HowManySubstitutions >= 100,]$position
PositionsUnderSelection  = Freq[Freq$HowManySubstitutions < 100,]$position
TempUnderMutagenesis = temp[temp$position %in% PositionsUnderMutagenesis,]; nrow(TempUnderMutagenesis) # 2338
TempUnderSelection =   temp[temp$position %in% PositionsUnderSelection,]; nrow(TempUnderSelection) # 601
table(TempUnderSelection$AaSubst)   # 316 / 285  = 1.108; 129/110 = 1.17
table(TempUnderMutagenesis$AaSubst) #  1230 / 1108 = 1.110;  1055 / 933 = 1.13
491/460
1055/933
nrow(TempUnderMutagenesis) # 2338
nrow(TempUnderSelection) # 601
491/460
1055/933
nrow(TempUnderMutagenesis) # 2338
nrow(TempUnderSelection) # 601
PositionsUnderMutagenesis = Freq[Freq$HowManySubstitutions >= 500,]$position
PositionsUnderSelection  = Freq[Freq$HowManySubstitutions < 500,]$position
TempUnderMutagenesis = temp[temp$position %in% PositionsUnderMutagenesis,]; nrow(TempUnderMutagenesis) # 2338
TempUnderSelection =   temp[temp$position %in% PositionsUnderSelection,]; nrow(TempUnderSelection) # 601
table(TempUnderSelection$AaSubst)   # 316 / 285  = 1.108;   491/460  = 1.06
table(TempUnderMutagenesis$AaSubst) #  1230 / 1108 = 1.110; 1055/933 = 1.13
680/623
866 / 770
summary(Freq$HowManySubstitutions)
PositionsUnderMutagenesis = Freq[Freq$HowManySubstitutions >= 4,]$position
PositionsUnderSelection  = Freq[Freq$HowManySubstitutions < 4,]$position
TempUnderMutagenesis = temp[temp$position %in% PositionsUnderMutagenesis,]; nrow(TempUnderMutagenesis) # 2338
TempUnderSelection =   temp[temp$position %in% PositionsUnderSelection,]; nrow(TempUnderSelection) # 601
PositionsUnderMutagenesis = Freq[Freq$HowManySubstitutions > 4,]$position
PositionsUnderSelection  = Freq[Freq$HowManySubstitutions =< 4,]$position
summary(Freq$HowManySubstitutions) # 1.00    4.00    4.00   33.02   12.00 1636.00
PositionsUnderSelection  = Freq[Freq$HowManySubstitutions <= 4,]$position
TempUnderMutagenesis = temp[temp$position %in% PositionsUnderMutagenesis,]; nrow(TempUnderMutagenesis) # 2338
TempUnderSelection =   temp[temp$position %in% PositionsUnderSelection,]; nrow(TempUnderSelection) # 601
table(TempUnderSelection$AaSubst)   # 316 / 285  = 1.108;   491/460  = 1.06; 680/623 = 1.09
table(TempUnderMutagenesis$AaSubst) #  1230 / 1108 = 1.110; 1055/933 = 1.13; 866 / 770 = 1.12
87/71
1459  /  1322
Freq
PositionsUnderMutagenesis = Freq[Freq$HowManySubstitutions > 12,]$position
PositionsUnderSelection  = Freq[Freq$HowManySubstitutions <= 12,]$position
TempUnderMutagenesis = temp[temp$position %in% PositionsUnderMutagenesis,]; nrow(TempUnderMutagenesis) # 2338
TempUnderSelection =   temp[temp$position %in% PositionsUnderSelection,]; nrow(TempUnderSelection) # 601
table(TempUnderSelection$AaSubst)   # 316 / 285  = 1.108;   491/460  = 1.06; 680/623 = 1.09; 87/71 = 1.22
table(TempUnderMutagenesis$AaSubst) #  1230 / 1108 = 1.110; 1055/933 = 1.13; 866 / 770 = 1.12;  1459  /  1322 =  1.1
146/127
table(TempUnderMutagenesis$AaSubst) #  1230 / 1108 = 1.110; 1055/933 = 1.13; 866 / 770 = 1.12;  1459  /  1322 =  1.1;
1400/1266
Positions = data.frame(table(data$position))
names(Positions)=c('position','HowManySubstitutions')
head(Positions)
Positions = Positions[order(Positions$HowManySubstitutions),]
head(Positions)
Positions = Positions[order(-Positions$HowManySubstitutions),]
head(Positions)
summary(Positions$HowManySubstitutions)
## temp analysis (Alima + Kostya): moving threshold ~ plot: frequencies of changes in a given position versus AaSymmetry
EvolConstOfPositions = data.frame(table(data$position));
names(EvolConstOfPositions)=c('position','HowManySubstitutions')
EvolConstOfPositions = EvolConstOfPositions[order(-EvolConstOfPositions$HowManySubstitutions),]
head(EvolConstOfPositions) # ~ helix mtDB
summary(EvolConstOfPositions$HowManySubstitutions)
temp = data[(data$ancestral_aa == 'Leu' & data$derived_aa == 'Pro' ) | (data$ancestral_aa == 'Pro' & data$derived_aa == 'Leu') ,]
temp$AaSubst = paste(temp$ancestral_aa,temp$derived_aa, sep = '_'); nrow(temp)
EvolConstOfPositions = data.frame(table(data$position));
names(EvolConstOfPositions)=c('position','HowManySubstitutions')
EvolConstOfPositions = EvolConstOfPositions[order(-EvolConstOfPositions$HowManySubstitutions),]
head(EvolConstOfPositions) # ~ helix mtDB
summary(EvolConstOfPositions$HowManySubstitutions)
EvolConstOfPositions
dim(EvolConstOfPositions)
head(EvolConstOfPositions)
quantile(0.1,EvolConstOfPositions$HowManySubstitutions)
quantile(EvolConstOfPositions$HowManySubstitutions,0.1)
EvolConstOfPositions = data.frame(table(data$position));
names(EvolConstOfPositions)=c('position','HowManySubstitutions')
EvolConstOfPositions = EvolConstOfPositions[order(-EvolConstOfPositions$HowManySubstitutions),]
head(EvolConstOfPositions) # ~ helix mtDB
summary(EvolConstOfPositions$HowManySubstitutions)
dim(EvolConstOfPositions)
head(EvolConstOfPositions)
EvolConstOfPositionsVec1 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.1),]$positions)
EvolConstOfPositionsVec1 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.1),]$positions
EvolConstOfPositionsVec1
head(EvolConstOfPositions)
EvolConstOfPositionsVec1 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.1),]$position
EvolConstOfPositionsVec1
EvolConstOfPositionsVec2 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.2) & EvolConstOfPositions$HowManySubstitutions > quantile(EvolConstOfPositions$HowManySubstitutions,0.1),]$position
EvolConstOfPositionsVec2
length(EvolConstOfPositionsVec1)
length(EvolConstOfPositionsVec2)
EvolConstOfPositionsVec2 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.2) && EvolConstOfPositions$HowManySubstitutions > quantile(EvolConstOfPositions$HowManySubstitutions,0.1),]$position
length(EvolConstOfPositionsVec2)
quantile(EvolConstOfPositions$HowManySubstitutions,0.2)
EvolConstOfPositionsVec1 = EvolConstOfPositions[EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.1),]$position
EvolConstOfPositionsVec2 = EvolConstOfPositions[(EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.2)) & (EvolConstOfPositions$HowManySubstitutions >= quantile(EvolConstOfPositions$HowManySubstitutions,0.1)),]$position
length(EvolConstOfPositionsVec1)
length(EvolConstOfPositionsVec2)
EvolConstOfPositionsVec3 = EvolConstOfPositions[(EvolConstOfPositions$HowManySubstitutions <= quantile(EvolConstOfPositions$HowManySubstitutions,0.3)) & (EvolConstOfPositions$HowManySubstitutions >= quantile(EvolConstOfPositions$HowManySubstitutions,0.2)),]$position
length(EvolConstOfPositionsVec3)
temp = data[(data$ancestral_aa == 'Leu' & data$derived_aa == 'Pro' ) | (data$ancestral_aa == 'Pro' & data$derived_aa == 'Leu') ,]
temp$AaSubst = paste(temp$ancestral_aa,temp$derived_aa, sep = '_'); nrow(temp)
